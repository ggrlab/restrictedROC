[{"path":[]},{"path":"https://ggrlab.github.io/restrictedROC/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to restrictedROC","title":"Contributing to restrictedROC","text":"outlines propose change restrictedROC. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to restrictedROC","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to restrictedROC","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to restrictedROC","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"ggrlab/restrictedROC\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. Disable pre-commit single commit: git commit . -m 'quick fix' ---verify","code":"# Use pre-commits to check your code before committing it remotes::install_github(\"lorenzwalthert/precommit\") precommit::install_precommit() precommit::use_precommit()  # Increase the versions, manually or by using usethis::use_version() usethis::use_version(\"minor\") usethis::use_version(\"dev\")  # Add new functionality and document it # During development, have a clean R environment and run devtools::load_all() to load the current status of the package devtools::load_all()  # After adding new functionality, run devtools::check() to update the documentation devtools::check() devtools::document()  # Vignettes are a great way to document your package # Add a new vignette by running usethis::use_vignette(\"vignette_name\") # Change the vignette in vignettes/vignette_name.Rmd # Build the vignette by running devtools::build_vignettes() # This also installs the package  # Articles # Instead of a vignette, you can create an article, which is a term used by # pkgdown for a vignette-like .Rmd document that is not shipped with the package, # but that appears only in the website. usethis::use_article(\"article_name\")   devtools::build_readme() # This updates the README.md file from the README.Rmd   # Further arguments of devtools::build_site() are forwarded to pkgdown::build_site(): # https://pkgdown.r-lib.org/reference/build_site.html devtools::build_site() devtools::build_site(devel = TRUE, lazy = TRUE) # Use this for faster iteration during development"},{"path":"https://ggrlab.github.io/restrictedROC/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to restrictedROC","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to restrictedROC","text":"Please note restrictedROC project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/CONTRIBUTING.html","id":"how-was-this-package-created","dir":"","previous_headings":"","what":"How was this package created?","title":"Contributing to restrictedROC","text":"usethis tells envoke github-related commands. two ways continue: 1. Create personal access token (PAT) use authenticate github 2. Manually push package github Pushing manually works fine, advanced usethis commands won’t work properly, therefore continue PAT. WARNING!!! error occurs e.g. repository exists already github, use following instead usethis::use_github(): Additional information: precommit wonderful tool check code committing . committing: pre-commit install --hook-type pre-push, commit. Used packages:","code":"# for VSCode install.packages(\"languageserver\") install.packages(\"devtools\") usethis::create_tidy_package(\"/home/gugl/clonedgit/ggrlab/restrictedROC\") usethis::proj_activate(\"/home/gugl/clonedgit/ggrlab/restrictedROC\") usethis::use_tidy_style(strict = TRUE) usethis::use_git() usethis::create_github_token() gitcreds::gitcreds_set() # Then enter the freshly generated token usethis::use_github(     organisation = \"ggrlab\",     private = FALSE,     visibility = \"public\" ) git branch -M main_devel git remote add origin git@github.com:ggrlab/restrictedROC.git git checkout main git merge main_devel --allow-unrelated-histories git push -u origin main git branch --delete main_devel usethis::use_tidy_github() usethis::use_tidy_github_actions() # overwrite tidy's default \"check-full\" with \"check-standard\" # to not run so many checks usethis::use_github_action(\"check-standard\") usethis::use_tidy_github_labels() usethis::use_pkgdown_github_pages() usethis::use_author(     given = \"Gunther\",     family = \"Glehr\",     email = \"gunthergl@gmx.net\",     role = c(\"aut\", \"cre\"),     comment = c(\"ORCID\" = \"0000-0002-1495-9162\") ) usethis::use_lifecycle() usethis::use_news_md() lintr::use_lintr(type = \"tidyverse\") # Change manually to: # linters: linters_with_defaults(line_length_linter = line_length_linter(120),indentation_linter = indentation_linter(4)) # see vignette(\"lintr\") # encoding: \"UTF-8\" # https://lorenzwalthert.github.io/precommit/articles/precommit.html # install.packages(\"precommit\") # bash::$ conda deactivate # bash::$ pip3 install pre-commit precommit::install_precommit() precommit::use_precommit() usethis::use_package(\"ggplot2\") usethis::use_package(\"patchwork\") usethis::use_package(\"pROC\") usethis::use_package(\"ggpubr\") usethis::use_package(\"stats\") usethis::use_package(\"tibble\") usethis::use_package(\"dplyr\") usethis::use_package(\"labeling\") usethis::use_package(\"tidyr\") usethis::use_package(\"statmod\") usethis::use_package(\"future.apply\") usethis::use_package(\"readxl\", type = \"Suggests\") usethis::use_package(\"h2o\", type = \"Suggests\") usethis::use_package(\"data.table\", type = \"Suggests\") precommit::snippet_generate(\"additional-deps-roxygenize\")"},{"path":"https://ggrlab.github.io/restrictedROC/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 restrictedROC authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with restrictedROC","title":"Getting help with restrictedROC","text":"Thanks using restrictedROC! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with restrictedROC","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with restrictedROC","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with restrictedROC","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":[]},{"path":"https://ggrlab.github.io/restrictedROC/SUPPORT.html","id":"devtoolsbuild_vignettes-fails","dir":"","previous_headings":"","what":"devtools::build_vignettes fails","title":"Getting help with restrictedROC","text":"Solution:","code":"--- re-building 'first_function.Rmd' using rmarkdown Error: processing vignette 'first_function.Rmd' failed with diagnostics: unused argument (resolve_symlink = FALSE) --- failed re-building 'first_function.Rmd'  SUMMARY: processing the following file failed:   'first_function.Rmd' install.packages(\"xfun\")"},{"path":"https://ggrlab.github.io/restrictedROC/SUPPORT.html","id":"vignette-xfunisfalse-will-be-deprecated","dir":"","previous_headings":"","what":"Vignette xfun::isFalse() will be deprecated","title":"Getting help with restrictedROC","text":": devtools::check() throws following error: Solution: See https://stackoverflow.com/questions/76081732/problem--converting-r-file--r-markdown","code":"> checking re-building of vignette outputs ... ERROR   Error(s) in re-building vignettes:     ...   --- re-building 'first_function.Rmd' using rmarkdown   Quitting from lines 11-15 (first_function.Rmd)    Error: processing vignette 'first_function.Rmd' failed with diagnostics:   The function xfun::isFALSE() will be deprecated in the future. Please consider using base::isFALSE(x) or identical(x, FALSE) instead.   --- failed re-building 'first_function.Rmd'      SUMMARY: processing the following file failed:     'first_function.Rmd'      Error: Vignette re-building failed.   Execution halted install.packages(\"knitr\")"},{"path":[]},{"path":"https://ggrlab.github.io/restrictedROC/Troubleshooting.html","id":"devtoolsbuild_vignettes-fails","dir":"","previous_headings":"","what":"devtools::build_vignettes fails","title":"Troubleshooting restrictedROC","text":"Solution:","code":"--- re-building 'first_function.Rmd' using rmarkdown Error: processing vignette 'first_function.Rmd' failed with diagnostics: unused argument (resolve_symlink = FALSE) --- failed re-building 'first_function.Rmd'  SUMMARY: processing the following file failed:   'first_function.Rmd' install.packages(\"xfun\")"},{"path":"https://ggrlab.github.io/restrictedROC/Troubleshooting.html","id":"vignette-xfunisfalse-will-be-deprecated","dir":"","previous_headings":"","what":"Vignette xfun::isFalse() will be deprecated","title":"Troubleshooting restrictedROC","text":": devtools::check() throws following error: Solution: See https://stackoverflow.com/questions/76081732/problem--converting-r-file--r-markdown","code":"> checking re-building of vignette outputs ... ERROR   Error(s) in re-building vignettes:     ...   --- re-building 'first_function.Rmd' using rmarkdown   Quitting from lines 11-15 (first_function.Rmd)    Error: processing vignette 'first_function.Rmd' failed with diagnostics:   The function xfun::isFALSE() will be deprecated in the future. Please consider using base::isFALSE(x) or identical(x, FALSE) instead.   --- failed re-building 'first_function.Rmd'      SUMMARY: processing the following file failed:     'first_function.Rmd'      Error: Vignette re-building failed.   Execution halted install.packages(\"knitr\")"},{"path":"https://ggrlab.github.io/restrictedROC/articles/examples_01_AUROC_TESTS.html","id":"auroc-is-the-equivalent-to-mann-whitney-u-statistic","dir":"Articles","previous_headings":"","what":"AUROC is the equivalent to Mann-Whitney U statistic","title":"AUROC, Mann-Whitney U and Wilcoxon rank-sum","text":"","code":"# Example from Wackerly 2014, p758, 15.6 values <- c(25, 26, 27, 28, 29, 31, 32, 35) names(values) <- c(\"I\", \"I\", \"I\", \"II\", \"II\", \"I\", \"II\", \"II\") print(values) #>  I  I  I II II  I II II  #> 25 26 27 28 29 31 32 35  # Count how many observations in I and II n_1 <- length(values[names(values) == \"I\"]) n_2 <- length(values[names(values) == \"II\"])  auroc_from_u <- u_total / (n_1 * n_2) print(auroc_from_u) #> [1] 0.875  # Explicitely calculate AUC with pROC print(pROC::roc(     response = names(values),     predictor = values,     levels = c(\"I\", \"II\"),     direction = \"<\",     auc = TRUE )) #>  #> Call: #> roc.default(response = names(values), predictor = values, levels = c(\"I\",     \"II\"), direction = \"<\", auc = TRUE) #>  #> Data: values in 4 controls (names(values) I) < 4 cases (names(values) II). #> Area under the curve: 0.875"},{"path":"https://ggrlab.github.io/restrictedROC/articles/examples_01_AUROC_TESTS.html","id":"bigger-example-of-auroc-vs-mann-whitney-u-statistic","dir":"Articles","previous_headings":"","what":"Bigger example of AUROC vs Mann-Whitney U statistic","title":"AUROC, Mann-Whitney U and Wilcoxon rank-sum","text":"R’s two-sample wilcoxon.test (default) calculated “exact” less 50 observations groups. n.x number samples first group, n.y number samples second group. See https://github.com/SurajGupta/r-source/blob/master/src/library/stats/R/wilcox.test.R code. Briefly going code: Line 245 starts two sample case Line 252: exact == NULL (default), exact <- (n.x < 50) && (n.y < 50) ties: z-standardization approximization Without ties: Exact calculation","code":"set.seed(2) values <- c(     a = rnorm(50, mean = 8, sd = 1),     b = rnorm(50, mean = 9, sd = 2) ) names(values) <- gsub(\"[0-9]*\", \"\", names(values)) n_1 <- length(values[names(values) == \"a\"]) n_2 <- length(values[names(values) == \"b\"])  big_roc <- pROC::roc(     response = names(values),     predictor = values,     levels = c(\"a\", \"b\"),     direction = \"<\",     auc = TRUE ) big_wilcox <- wilcox.test(     x = values[names(values) == \"a\"],     y = values[names(values) == \"b\"],     paired = FALSE,     alternative = \"two.sided\" ) big_ttest <- t.test(     x = values[names(values) == \"a\"],     y = values[names(values) == \"b\"],     paired = FALSE,     alternative = \"two.sided\" )  u_from_wilcox <- n_1 * n_2 - big_wilcox$statistic auc_from_u <- u_from_wilcox / (n_1 * n_2) print(auc_from_u) #>      W  #> 0.5592 print(big_roc) #>  #> Call: #> roc.default(response = names(values), predictor = values, levels = c(\"a\",     \"b\"), direction = \"<\", auc = TRUE) #>  #> Data: values in 50 controls (names(values) a) < 50 cases (names(values) b). #> Area under the curve: 0.5592  # Plot ROC curve library(ggplot2) df_split <- as.data.frame(split(values, names(values)))  plot_box <- ggplot(     tidyr::pivot_longer(df_split, dplyr::everything()),     aes(x = name, y = value, fill = name) ) +     geom_boxplot() +     geom_jitter(size = 1, width = .1) +     scale_fill_manual(values = c(\"a\" = \"#ee000070\", \"b\" = \"#008B4570\")) +     ggpubr::theme_pubr() plots_rroc <- restrictedROC::plot_density_ROC_empirical(     values_grouped = df_split,     xmin = min(values), xmax = max(values),     levels = c(\"a\", \"b\"),     direction = \"<\" ) scaling <- .35 pdf(paste0(main_plotname, \"boxplot_density_roc.pdf\"), width = 30 * scaling, height = 10 * scaling) set.seed(51) # for geom_jitter reproducibility patchwork::wrap_plots(     plot_box,     plots_rroc[[1]] +         scale_fill_manual(values = c(\"a\" = \"#ee000070\", \"b\" = \"#008B4570\")),     plots_rroc[[2]] ) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. dev.off() #> agg_png  #>       2 rroc_perm <- restrictedROC::simple_rROC_permutation(     response = names(values),     predictor = values,     n_permutations = 1000,     positive_label = \"b\",     direction = \"<\",     return_proc = TRUE ) # nolint start print(big_roc) #>  #> Call: #> roc.default(response = names(values), predictor = values, levels = c(\"a\",     \"b\"), direction = \"<\", auc = TRUE) #>  #> Data: values in 50 controls (names(values) a) < 50 cases (names(values) b). #> Area under the curve: 0.5592 # Call: # roc.default(response = names(values), predictor = values, levels = c(\"a\",     \"b\"), direction = \"<\", auc = TRUE)  # Data: values in 50 controls (names(values) a) < 50 cases (names(values) b). # Area under the curve: 0.5592  print(big_ttest) #>  #>  Welch Two Sample t-test #>  #> data:  values[names(values) == \"a\"] and values[names(values) == \"b\"] #> t = -1.7942, df = 69.92, p-value = 0.07711 #> alternative hypothesis: true difference in means is not equal to 0 #> 95 percent confidence interval: #>  -1.41436615  0.07477889 #> sample estimates: #> mean of x mean of y  #>  8.069138  8.738932 #         Welch Two Sample t-test # data:  values[names(values) == \"a\"] and values[names(values) == \"b\"] # t = -1.7942, df = 69.92, p-value = 0.07711 # alternative hypothesis: true difference in means is not equal to 0 # 95 percent confidence interval: #  -1.41436615  0.07477889 # sample estimates: # mean of x mean of y #  8.069138  8.738932  print(big_wilcox) #>  #>  Wilcoxon rank sum test with continuity correction #>  #> data:  values[names(values) == \"a\"] and values[names(values) == \"b\"] #> W = 1102, p-value = 0.3092 #> alternative hypothesis: true location shift is not equal to 0 # data:  values[names(values) == \"a\"] and values[names(values) == \"b\"] # W = 1102, p-value = 0.3092 # alternative hypothesis: true location shift is not equal to 0  print(rroc_perm$permutation_pval) #>    pval.twoside.max pval.twoside.global      n_permutations  #>        6.993007e-03        3.226773e-01        1.000000e+03 #    pval.twoside.max pval.twoside.global      n_permutations #        6.993007e-03        3.226773e-01        1.000000e+03 print(rroc_perm$max_total) #>         auc auc_var_H0    rzAUC    pval_asym threshold part #> 1 0.7549342 0.00486568 3.654739 0.0002574438  7.381726 high #         auc auc_var_H0    rzAUC    pval_asym threshold part # 1 0.7549342 0.00486568 3.654739 0.0002574438  7.381726 high  cat(\"Informative range established from restriction: (\", round(rroc_perm$max_total[[\"threshold\"]], 2), \", Inf)\\n\", sep = \"\") #> Informative range established from restriction: (7.38, Inf) # Informative range established from restriction: (7.38, Inf) # nolint end  rroc_part_plots <- restrictedROC::plot_rROC_part(     rroc_perm,     threshold = rroc_perm$max_total[[\"threshold\"]] ) informative_range <- c(rroc_perm$max_total[[\"threshold\"]]) pdf(paste0(main_plotname, \"boxplot_density_roc_restriction.pdf\"), width = 30 * scaling, height = 10 * scaling) set.seed(51) # for geom_jitter reproducibility patchwork::wrap_plots(     plot_box + geom_hline(yintercept = informative_range, col = \"red\", linewidth = 1),     plots_rroc[[1]] +         geom_vline(xintercept = informative_range, col = \"red\", linewidth = 1) +         scale_fill_manual(values = c(\"a\" = \"#ee000070\", \"b\" = \"#008B4570\")),     plots_rroc[[2]] ) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. dev.off() #> agg_png  #>       2 pdf(paste0(main_plotname, \"boxplot_density_roc_restriction_parts.pdf\"), height = 4, width = 4) print(rroc_part_plots) #> $plotlist #> $plotlist$A #>  #> $plotlist$B #>  #> $plotlist$C #>  #> $plotlist$D #>  #> $plotlist$E #>  #> $plotlist$F #>  #>  #> $patchworked dev.off() #> agg_png  #>       2 r <- rank(c(x - mu, y)) STATISTIC <- c(\"W\" = sum(r[seq_along(x)]) - n.x * (n.x + 1) / 2)  NTIES <- table(r) z <- STATISTIC - n.x * n.y / 2 SIGMA <- sqrt((n.x * n.y / 12) * ((n.x + n.y + 1) - sum(NTIES^3 - NTIES) / ((n.x + n.y) * (n.x + n.y - 1)))) z <- (z - CORRECTION) / SIGMA  if (correct) {     CORRECTION <- switch(alternative,         \"two.sided\" = sign(z) * 0.5,         \"greater\" = 0.5,         \"less\" = -0.5     )     METHOD <- paste(METHOD, \"with continuity correction\") }  PVAL <- switch(alternative,     \"less\" = pnorm(z),     \"greater\" = pnorm(z, lower.tail = FALSE),     \"two.sided\" = 2 * min(         pnorm(z),         pnorm(z, lower.tail = FALSE)     ) ) r <- rank(c(x - mu, y)) STATISTIC <- c(\"W\" = sum(r[seq_along(x)]) - n.x * (n.x + 1) / 2)  PVAL <- switch(alternative,     \"two.sided\" = {         p <- if (STATISTIC > (n.x * n.y / 2)) {             pwilcox(STATISTIC - 1, n.x, n.y, lower.tail = FALSE)         } else {             pwilcox(STATISTIC, n.x, n.y)         }         min(2 * p, 1)     },     \"greater\" = {         pwilcox(STATISTIC - 1, n.x, n.y, lower.tail = FALSE)     },     \"less\" = pwilcox(STATISTIC, n.x, n.y) ) set.seed(4) values <- c(     a = rnorm(55, mean = 8, sd = 1),     b = rnorm(55, mean = 8, sd = 1)     # b = rnorm(75, mean = 8, sd = 2) ) names(values) <- gsub(\"[0-9]*\", \"\", names(values)) rroc_perm_2 <- restrictedROC::rROC(     y = names(values),     x = values,     n_permutations = 0,     positive_label = \"b\",     direction = \"<\",     return_proc = TRUE ) #> Wed May  8 16:37:08 2024      y x ( 1 ) rroc_perfs <- rroc_perm_2[[1]][[1]][[\"permutation\"]][[\"performances\"]]  data_df <- tibble::tibble(     response = names(values),     predictor = values ) wilcox_res <- lapply(rroc_perfs[[\"threshold\"]], function(t_x) {     samples_above_threshold <- data_df |> dplyr::filter(predictor > t_x)     samples_a <- samples_above_threshold |> dplyr::filter(response == \"a\")     samples_b <- samples_above_threshold |> dplyr::filter(response == \"b\")     if (nrow(samples_b) < 1 || nrow(samples_a) < 1) {         return(NULL)     }     tmp <- wilcox.test(         x = samples_a |> dplyr::pull(predictor),         y = samples_b |> dplyr::pull(predictor),         alternative = \"two.sided\"     )     return(tmp) }) w_statistic <- unlist(lapply(wilcox_res, function(x) x$statistic)) w_pvalue <- unlist(lapply(wilcox_res, function(x) x$p.value))  rroc_perfs[[\"w.statistic\"]] <- NA rroc_perfs[[\"w.pvalue\"]] <- NA rroc_perfs[seq_along(w_statistic), \"w.statistic\"] <- w_statistic rroc_perfs[seq_along(w_pvalue), \"w.pvalue\"] <- w_pvalue  rroc_perfs[[\"u_from_wilcox\"]] <- with(rroc_perfs, positives_high * negatives_high - w.statistic) rroc_perfs[[\"auroc_from_u\"]] <- with(rroc_perfs, u_from_wilcox / (positives_high * negatives_high))  rroc_perfs[, c(1:8, 20:25)] #> # A tibble: 111 × 14 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.391             55             55         1            0.00306 #>  2      6.24    0.379             55             54         1.02         0.00309 #>  3      6.27    0.386             54             54         1.04         0.00311 #>  4      6.29    0.394             53             54         1.06         0.00314 #>  5      6.41    0.382             53             53         1.08         0.00317 #>  6      6.52    0.370             53             52         1.10         0.00321 #>  7      6.61    0.378             52             52         1.12         0.00324 #>  8      6.69    0.385             51             52         1.14         0.00327 #>  9      6.71    0.393             50             52         1.16         0.00330 #> 10      6.72    0.381             50             51         1.19         0.00333 #> # ℹ 101 more rows #> # ℹ 8 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   tpr_global <dbl>, fpr_global <dbl>, w.statistic <dbl>, w.pvalue <dbl>, #> #   u_from_wilcox <dbl>, auroc_from_u <dbl>  rroc_perfs[[\"fpr_global\"]] #>   [1] 1.00000000 0.98181818 0.98181818 0.98181818 0.96363636 0.94545455 #>   [7] 0.94545455 0.94545455 0.94545455 0.92727273 0.92727273 0.92727273 #>  [13] 0.92727273 0.92727273 0.92727273 0.92727273 0.90909091 0.89090909 #>  [19] 0.89090909 0.87272727 0.87272727 0.87272727 0.85454545 0.85454545 #>  [25] 0.83636364 0.81818182 0.80000000 0.80000000 0.80000000 0.80000000 #>  [31] 0.80000000 0.78181818 0.78181818 0.76363636 0.74545455 0.74545455 #>  [37] 0.72727273 0.72727273 0.72727273 0.70909091 0.69090909 0.69090909 #>  [43] 0.69090909 0.67272727 0.67272727 0.65454545 0.65454545 0.65454545 #>  [49] 0.65454545 0.65454545 0.65454545 0.63636364 0.61818182 0.61818182 #>  [55] 0.61818182 0.60000000 0.58181818 0.56363636 0.54545455 0.54545455 #>  [61] 0.52727273 0.52727273 0.50909091 0.50909091 0.50909091 0.49090909 #>  [67] 0.47272727 0.47272727 0.45454545 0.43636364 0.43636364 0.43636364 #>  [73] 0.41818182 0.40000000 0.40000000 0.38181818 0.36363636 0.34545455 #>  [79] 0.34545455 0.34545455 0.34545455 0.32727273 0.32727273 0.32727273 #>  [85] 0.30909091 0.30909091 0.29090909 0.29090909 0.27272727 0.25454545 #>  [91] 0.23636364 0.23636364 0.21818182 0.21818182 0.20000000 0.18181818 #>  [97] 0.16363636 0.16363636 0.14545455 0.12727273 0.10909091 0.09090909 #> [103] 0.09090909 0.07272727 0.07272727 0.05454545 0.03636364 0.01818182 #> [109] 0.00000000 0.00000000 0.00000000 rroc_perfs[[\"w.pvalue\"]] - rroc_perfs[[\"pval_asym_high\"]] #>   [1] 0.0003396897 0.0002304702 0.0003108431 0.0004146124 0.0002857465 #>   [6] 0.0001872807 0.0002569748 0.0003489478 0.0004683155 0.0003225519 #>  [11] 0.0004366585 0.0005835785 0.0007687320 0.0009963163 0.0012679749 #>  [16] 0.0015811224 0.0012833854 0.0014884505 0.0021854832 0.0014326423 #>  [21] 0.0021450978 0.0029315980 0.0021343097 0.0029511254 0.0021202277 #>  [26] 0.0012993356 0.0005918934 0.0011862297 0.0019520296 0.0028552880 #>  [31] 0.0038150164 0.0029027484 0.0039089297 0.0029524494 0.0019362525 #>  [36] 0.0029474325 0.0018911422 0.0029366558 0.0041033968 0.0029853726 #>  [41] 0.0018409164 0.0029654999 0.0042560044 0.0030141898 0.0043742524 #>  [46] 0.0030657910 0.0045011260 0.0059579880 0.0071326302 0.0076656332 #>  [51] 0.0072757507 0.0079660796 0.0080909831 0.0082478910 0.0072922626 #>  [56] 0.0084199745 0.0090313282 0.0089158073 0.0079886342 0.0095051961 #>  [61] 0.0086361252 0.0101483188 0.0093723530 0.0108431742 0.0108327744 #>  [66] 0.0115895438 0.0112752483 0.0123214773 0.0123129744 0.0109797200 #>  [71] 0.0133505485 0.0137890254 0.0145621721 0.0137669517 0.0157755667 #>  [76] 0.0153711960 0.0130347841 0.0091403003 0.0141600292 0.0186343847 #>  [81] 0.0200944018 0.0211010021 0.0212084593 0.0234064201 0.0214991123 #>  [86] 0.0274921390 0.0279998626 0.0276812676 0.0318385358 0.0343985838 #>  [91] 0.0343350001 0.0371438028 0.0423128966 0.0284212883 0.0377763522 #>  [96] 0.0482931603 0.0578873709 0.0336865760 0.0483456757 0.0674169901 #> [101] 0.0870925246 0.0982659643 0.0961396165 0.1490713064 0.0692558269 #> [106] 0.1167354833 0.2119980830 0.4459953047           NA           NA #> [111]           NA pdf(paste0(main_plotname, \"rzAUC_vs_wilcox.pdf\"), width = 6, height = 4) print(     ggplot(rroc_perfs, aes(x = auc_high, y = round(auroc_from_u - auc_high, 8))) +         geom_point() +         ggtitle(             \"Restricted rAUC == (rAUC from wilcoxon test)?\",             subtitle = \"Sanity check if restricted AUC is equivalent to calculated AUC \\nfrom multiple wilcoxon test on the corresponding sample subsets\"         ) +         ggpubr::theme_pubr() +         theme(             plot.title = element_text(size = 6),             plot.subtitle = element_text(size = 6)         ) ) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`). print(     ggplot(         rroc_perfs |>             dplyr::select(fpr_global, pval_asym_high, w.pvalue) |>             tidyr::pivot_longer(-fpr_global, names_to = \"name\", values_to = \"p.value\"),         aes(x = fpr_global, y = (p.value), col = name)     ) +         geom_point() +         ggpubr::theme_pubr() ) #> Warning: Removed 6 rows containing missing values or values outside the scale range #> (`geom_point()`). print(     ggplot(         rroc_perfs |>             dplyr::select(fpr_global, pval_asym_high, w.pvalue) |>             tidyr::pivot_longer(-fpr_global, names_to = \"name\", values_to = \"p.value\"),         aes(x = fpr_global, y = (p.value), col = name)     ) +         geom_point() +         ggpubr::theme_pubr() ) #> Warning: Removed 6 rows containing missing values or values outside the scale range #> (`geom_point()`). print(     ggplot(         rroc_perfs |>             dplyr::select(fpr_global, pval_asym_high, w.pvalue) |>             tidyr::pivot_longer(-fpr_global, names_to = \"name\", values_to = \"p.value\"),         aes(x = fpr_global, y = (p.value), col = name)     ) +         geom_point() +         geom_point(data = rroc_perfs[, c(\"fpr_global\", \"rzAUC_high\")], aes(y = -abs(rzAUC_high), col = \"-abs(rzAUC_high)\")) +         ggpubr::theme_pubr() ) #> Warning: Removed 6 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`).  # print( #     ggplot( #         rroc_perfs |> #             dplyr::select(fpr_global, pval_asym_high, w.pvalue) |> #             tidyr::pivot_longer(-fpr_global, names_to = \"name\", values_to = \"p.value\"), #         aes(x = fpr_global, y = (p.value), col = name) #     ) + #         geom_line() + #         geom_line(data = rroc_perfs[, c(\"fpr_global\", \"rzAUC_high\")], aes(y = -abs(rzAUC_high), col = \"-abs(rzAUC_high)\")) + #         ggpubr::theme_pubr() # )  print(     ggplot(         rroc_perfs,         aes(x = abs(rzAUC_high), y = pval_asym_high)     ) +         geom_point() +         ggpubr::theme_pubr() ) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`). print(     ggplot(         rroc_perfs,         aes(x = abs(rzAUC_high), y = w.pvalue)     ) +         geom_point() +         ggpubr::theme_pubr() ) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`). print(     ggplot(         rroc_perfs,         aes(x = fpr_global, y = w.pvalue)     ) +         geom_point() +         ggpubr::theme_pubr() ) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`). print(     ggplot(         rroc_perfs,         aes(x = fpr_global, y = pval_asym_high)     ) +         geom_point() +         ggpubr::theme_pubr() ) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`). print(     ggplot(         rroc_perfs,         aes(x = fpr_global, y = rzAUC_high)     ) +         geom_point() +         ggpubr::theme_pubr() ) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`). print(     ggplot(         rroc_perfs,         aes(x = pval_asym_high, y = w.pvalue)     ) +         geom_point() +         ggpubr::theme_pubr() ) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`).  dup_labels <- function(x) {     tmp <- apply(rroc_perfs[, c(\"positives_high\", \"negatives_high\")], 1, sum, na.rm = TRUE)     tmp[sapply(x, function(y) {         which.min(abs(rroc_perfs[[\"fpr_global\"]] - y))     })] } print(     ggplot(         rroc_perfs,         aes(x = fpr_global, y = pval_asym_high - w.pvalue)     ) +         geom_point() +         ggpubr::theme_pubr() +         scale_x_continuous(sec.axis = dup_axis(labels = dup_labels, name = \"Total number of samples\")) ) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_point()`). dev.off() #> agg_png  #>       2"},{"path":"https://ggrlab.github.io/restrictedROC/articles/paper_04_rROC_theoretic_FPR.html","id":"do-not-use-the-code","dir":"Articles","previous_headings":"","what":"Do not use the code!","title":"Paper 04: rROC theoretic with FPR","text":"code intended used rather show resulting plots. usage somewhat different suggest. Look pictures, code.","code":"plots_including_fpr <- function(rroc_theo_result, rroc_ylim = NA) {     plot_x_fpr <- ggplot(         rroc_theo_result[[\"rroc\"]][[\"single_rROC\"]][[\"performances\"]],         aes(x = threshold, y = fpr_global)     ) +         geom_point() +         ylab(\"False positive rate\") +         xlab(\"x threshold\") +         ggpubr::theme_pubr()     srroc <- rroc_theo_result[[\"rroc\"]][[\"single_rROC\"]]     max_th <- srroc$max_total$threshold     max_rzauc <- srroc$max_total$rzAUC     max_fpr <- srroc$performances[srroc$performances$threshold == max_th, ][[\"fpr_global\"]]     max_tpr <- srroc$performances[srroc$performances$threshold == max_th, ][[\"tpr_global\"]]      if (!all(is.na(rroc_ylim))) {         tmp <- rroc_theo_result[[\"rroc\"]][[\"plots\"]] + ggplot2::ylim(rroc_ylim)     } else {         tmp <- rroc_theo_result[[\"rroc\"]][[\"plots\"]]     }      return(list(         tmp,         tmp + ggplot2::theme(legend.position = \"none\"),         ggpubr::as_ggplot(ggpubr::get_legend(tmp)),         plot_x_fpr,         patchwork::wrap_plots(list(             \"A\" = tmp[[1]],             \"B\" = tmp[[3]] +                 geom_segment(x = max_fpr, xend = max_fpr, y = -Inf, yend = max_tpr, col = \"red\"),             \"C\" = plot_x_fpr +                 geom_segment(x = max_th, xend = max_th, y = -Inf, yend = max_fpr, col = \"red\") +                 geom_segment(x = -Inf, xend = max_th, y = max_fpr, yend = max_fpr, col = \"red\"),             \"D\" = tmp[[4]] +                 geom_segment(x = max_fpr, xend = max_fpr, y = -Inf, yend = max_rzauc, col = \"red\") +                 ggplot2::theme(legend.position = \"none\")         )) +             patchwork::plot_layout(design = \"AB\\nCD\")     )) }  n_positives <- 100 n_negatives <- 100  # 1. Random filename <- file.path(paste0(main_plotname, \"_random.pdf\")) # pdf(filename, height = main_height * size_factor, width = main_width * size_factor) rroc_theo <- plot_rROC_theoretical(     qnorm_positive = function(x) qnorm(x, mean = 5, sd = 1),     qnorm_negative = function(x) qnorm(x, mean = 5, sd = 1),     n_positive = n_positives,     n_negative = n_negatives,     return_all = TRUE ) print(plots_including_fpr(rroc_theo, rroc_ylim = c(-1, 1))) #> [[1]] #>  #> [[2]] #>  #> [[3]] #>  #> [[4]] #>  #> [[5]] # dev.off() # sink(paste0(filename, \".txt\")) print(rroc_theo) #> $data #> $data$positive #>   [1] 2.669921 2.942144 3.114823 3.244699 3.350327 3.440220 3.519027 3.589580 #>   [9] 3.653737 3.712786 3.767659 3.819053 3.867503 3.913432 3.957176 3.999010 #>  [17] 4.039162 4.077822 4.115150 4.151284 4.186343 4.220429 4.253633 4.286033 #>  [25] 4.317700 4.348698 4.379082 4.408903 4.438208 4.467037 4.495431 4.523423 #>  [33] 4.551047 4.578332 4.605307 4.631997 4.658428 4.684623 4.710603 4.736388 #>  [41] 4.762000 4.787457 4.812776 4.837976 4.863074 4.888085 4.913027 4.937915 #>  [49] 4.962764 4.987591 5.012409 5.037236 5.062085 5.086973 5.111915 5.136926 #>  [57] 5.162024 5.187224 5.212543 5.238000 5.263612 5.289397 5.315377 5.341572 #>  [65] 5.368003 5.394693 5.421668 5.448953 5.476577 5.504569 5.532963 5.561792 #>  [73] 5.591097 5.620918 5.651302 5.682300 5.713967 5.746367 5.779571 5.813657 #>  [81] 5.848716 5.884850 5.922178 5.960838 6.000990 6.042824 6.086568 6.132497 #>  [89] 6.180947 6.232341 6.287214 6.346263 6.410420 6.480973 6.559780 6.649673 #>  [97] 6.755301 6.885177 7.057856 7.330079 #>  #> $data$negative #>   [1] 2.669921 2.942144 3.114823 3.244699 3.350327 3.440220 3.519027 3.589580 #>   [9] 3.653737 3.712786 3.767659 3.819053 3.867503 3.913432 3.957176 3.999010 #>  [17] 4.039162 4.077822 4.115150 4.151284 4.186343 4.220429 4.253633 4.286033 #>  [25] 4.317700 4.348698 4.379082 4.408903 4.438208 4.467037 4.495431 4.523423 #>  [33] 4.551047 4.578332 4.605307 4.631997 4.658428 4.684623 4.710603 4.736388 #>  [41] 4.762000 4.787457 4.812776 4.837976 4.863074 4.888085 4.913027 4.937915 #>  [49] 4.962764 4.987591 5.012409 5.037236 5.062085 5.086973 5.111915 5.136926 #>  [57] 5.162024 5.187224 5.212543 5.238000 5.263612 5.289397 5.315377 5.341572 #>  [65] 5.368003 5.394693 5.421668 5.448953 5.476577 5.504569 5.532963 5.561792 #>  [73] 5.591097 5.620918 5.651302 5.682300 5.713967 5.746367 5.779571 5.813657 #>  [81] 5.848716 5.884850 5.922178 5.960838 6.000990 6.042824 6.086568 6.132497 #>  [89] 6.180947 6.232341 6.287214 6.346263 6.410420 6.480973 6.559780 6.649673 #>  [97] 6.755301 6.885177 7.057856 7.330079 #>  #>  #> $rroc #> $rroc$plots #>  #> $rroc$single_rROC #> $performances #> # A tibble: 101 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf         0.5            100            100         1            0.00168 #>  2      2.81      0.5             99             99         1.02         0.00169 #>  3      3.03      0.5             98             98         1.04         0.00171 #>  4      3.18      0.5             97             97         1.06         0.00173 #>  5      3.30      0.5             96             96         1.09         0.00175 #>  6      3.40      0.5             95             95         1.11         0.00176 #>  7      3.48      0.5             94             94         1.13         0.00178 #>  8      3.55      0.5             93             93         1.16         0.00180 #>  9      3.62      0.5             92             92         1.18         0.00182 #> 10      3.68      0.5             91             91         1.21         0.00184 #> # ℹ 91 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>   auc auc_var_H0 rzAUC pval_asym #> 1 0.5        0.5     0         1 #>  #> $keep_highs #>   auc auc_var_H0         rzAUC pval_asym threshold #> 1 0.5  0.0255102 -4.865767e-15         1  6.445696 #>  #> $keep_lows #>   auc auc_var_H0         rzAUC pval_asym threshold #> 1 0.5  0.0255102 -6.951096e-15         1  3.554304 #>  #> $max_total #>   auc auc_var_H0         rzAUC pval_asym threshold part #> 1 0.5  0.0255102 -6.951096e-15         1  3.554304  low #>  #> $positive_label #> [1] \"positive\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 100 controls (true_pred_df[[\"true\"]] FALSE) < 100 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.5 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\" # sink()  filename <- file.path(paste0(main_plotname, \"_posGTneg.pdf\")) # pdf(filename, height = main_height * size_factor, width = main_width * size_factor) rroc_theo <- plot_rROC_theoretical(     qnorm_positive = function(x) qnorm(x, mean = 6, sd = 1),     qnorm_negative = function(x) qnorm(x, mean = 5, sd = 1),     n_positive = n_positives,     n_negative = n_negatives,     return_all = TRUE ) print(plots_including_fpr(rroc_theo)) #> [[1]] #>  #> [[2]] #>  #> [[3]] #>  #> [[4]] #>  #> [[5]] # dev.off() # sink(paste0(filename, \".txt\")) print(rroc_theo) #> $data #> $data$positive #>   [1] 3.669921 3.942144 4.114823 4.244699 4.350327 4.440220 4.519027 4.589580 #>   [9] 4.653737 4.712786 4.767659 4.819053 4.867503 4.913432 4.957176 4.999010 #>  [17] 5.039162 5.077822 5.115150 5.151284 5.186343 5.220429 5.253633 5.286033 #>  [25] 5.317700 5.348698 5.379082 5.408903 5.438208 5.467037 5.495431 5.523423 #>  [33] 5.551047 5.578332 5.605307 5.631997 5.658428 5.684623 5.710603 5.736388 #>  [41] 5.762000 5.787457 5.812776 5.837976 5.863074 5.888085 5.913027 5.937915 #>  [49] 5.962764 5.987591 6.012409 6.037236 6.062085 6.086973 6.111915 6.136926 #>  [57] 6.162024 6.187224 6.212543 6.238000 6.263612 6.289397 6.315377 6.341572 #>  [65] 6.368003 6.394693 6.421668 6.448953 6.476577 6.504569 6.532963 6.561792 #>  [73] 6.591097 6.620918 6.651302 6.682300 6.713967 6.746367 6.779571 6.813657 #>  [81] 6.848716 6.884850 6.922178 6.960838 7.000990 7.042824 7.086568 7.132497 #>  [89] 7.180947 7.232341 7.287214 7.346263 7.410420 7.480973 7.559780 7.649673 #>  [97] 7.755301 7.885177 8.057856 8.330079 #>  #> $data$negative #>   [1] 2.669921 2.942144 3.114823 3.244699 3.350327 3.440220 3.519027 3.589580 #>   [9] 3.653737 3.712786 3.767659 3.819053 3.867503 3.913432 3.957176 3.999010 #>  [17] 4.039162 4.077822 4.115150 4.151284 4.186343 4.220429 4.253633 4.286033 #>  [25] 4.317700 4.348698 4.379082 4.408903 4.438208 4.467037 4.495431 4.523423 #>  [33] 4.551047 4.578332 4.605307 4.631997 4.658428 4.684623 4.710603 4.736388 #>  [41] 4.762000 4.787457 4.812776 4.837976 4.863074 4.888085 4.913027 4.937915 #>  [49] 4.962764 4.987591 5.012409 5.037236 5.062085 5.086973 5.111915 5.136926 #>  [57] 5.162024 5.187224 5.212543 5.238000 5.263612 5.289397 5.315377 5.341572 #>  [65] 5.368003 5.394693 5.421668 5.448953 5.476577 5.504569 5.532963 5.561792 #>  [73] 5.591097 5.620918 5.651302 5.682300 5.713967 5.746367 5.779571 5.813657 #>  [81] 5.848716 5.884850 5.922178 5.960838 6.000990 6.042824 6.086568 6.132497 #>  [89] 6.180947 6.232341 6.287214 6.346263 6.410420 6.480973 6.559780 6.649673 #>  [97] 6.755301 6.885177 7.057856 7.330079 #>  #>  #> $rroc #> $rroc$plots #>  #> $rroc$single_rROC #> $performances #> # A tibble: 201 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.766            100            100         1            0.00168 #>  2      2.81    0.763            100             99         1.01         0.00168 #>  3      3.03    0.761            100             98         1.02         0.00169 #>  4      3.18    0.758            100             97         1.03         0.00170 #>  5      3.30    0.756            100             96         1.04         0.00171 #>  6      3.40    0.753            100             95         1.05         0.00172 #>  7      3.48    0.751            100             94         1.06         0.00173 #>  8      3.55    0.748            100             93         1.08         0.00174 #>  9      3.62    0.745            100             92         1.09         0.00175 #> 10      3.66    0.742            100             91         1.10         0.00176 #> # ℹ 191 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>      auc auc_var_H0    rzAUC   pval_asym #> 1 0.7655     0.7655 6.487197 8.74476e-11 #>  #> $keep_highs #>      auc auc_var_H0    rzAUC   pval_asym threshold #> 1 0.7655   0.001675 6.487197 8.74476e-11      -Inf #>  #> $keep_lows #>      auc auc_var_H0    rzAUC   pval_asym threshold #> 1 0.7655   0.001675 6.487197 8.74476e-11       Inf #>  #> $max_total #>      auc auc_var_H0    rzAUC   pval_asym threshold   part #> 1 0.7655   0.001675 6.487197 8.74476e-11      -Inf global #>  #> $positive_label #> [1] \"positive\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 100 controls (true_pred_df[[\"true\"]] FALSE) < 100 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.7655 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\" # sink()   filename <- file.path(paste0(main_plotname, \"_pos2norm_highdiff.pdf\")) # pdf(filename, height = main_height * size_factor, width = main_width * size_factor) rroc_theo <- plot_rROC_theoretical(     qnorm_positive = function(x) {         retvec <- numeric(length(x))         for (i in seq_along(x)) {             if (i %% 4 == 0) {                 retvec[i] <- qnorm(x[i], 9, 1)             } else {                 retvec[i] <- qnorm(x[i], 5, 1)             }         }         return(retvec)     },     qnorm_negative = function(x) qnorm(x, mean = 5, sd = 1),     n_positive = n_positives,     n_negative = n_negatives,     return_all = TRUE ) print(plots_including_fpr(rroc_theo)) #> [[1]] #>  #> [[2]] #>  #> [[3]] #>  #> [[4]] #>  #> [[5]] # dev.off() # sink(paste0(filename, \".txt\")) print(rroc_theo) #> $data #> $data$positive #>   [1]  2.669921  2.942144  3.114823  7.244699  3.350327  3.440220  3.519027 #>   [8]  7.589580  3.653737  3.712786  3.767659  7.819053  3.867503  3.913432 #>  [15]  3.957176  7.999010  4.039162  4.077822  4.115150  8.151284  4.186343 #>  [22]  4.220429  4.253633  8.286033  4.317700  4.348698  4.379082  8.408903 #>  [29]  4.438208  4.467037  4.495431  8.523423  4.551047  4.578332  4.605307 #>  [36]  8.631997  4.658428  4.684623  4.710603  8.736388  4.762000  4.787457 #>  [43]  4.812776  8.837976  4.863074  4.888085  4.913027  8.937915  4.962764 #>  [50]  4.987591  5.012409  9.037236  5.062085  5.086973  5.111915  9.136926 #>  [57]  5.162024  5.187224  5.212543  9.238000  5.263612  5.289397  5.315377 #>  [64]  9.341572  5.368003  5.394693  5.421668  9.448953  5.476577  5.504569 #>  [71]  5.532963  9.561792  5.591097  5.620918  5.651302  9.682300  5.713967 #>  [78]  5.746367  5.779571  9.813657  5.848716  5.884850  5.922178  9.960838 #>  [85]  6.000990  6.042824  6.086568 10.132497  6.180947  6.232341  6.287214 #>  [92] 10.346263  6.410420  6.480973  6.559780 10.649673  6.755301  6.885177 #>  [99]  7.057856 11.330079 #>  #> $data$negative #>   [1] 2.669921 2.942144 3.114823 3.244699 3.350327 3.440220 3.519027 3.589580 #>   [9] 3.653737 3.712786 3.767659 3.819053 3.867503 3.913432 3.957176 3.999010 #>  [17] 4.039162 4.077822 4.115150 4.151284 4.186343 4.220429 4.253633 4.286033 #>  [25] 4.317700 4.348698 4.379082 4.408903 4.438208 4.467037 4.495431 4.523423 #>  [33] 4.551047 4.578332 4.605307 4.631997 4.658428 4.684623 4.710603 4.736388 #>  [41] 4.762000 4.787457 4.812776 4.837976 4.863074 4.888085 4.913027 4.937915 #>  [49] 4.962764 4.987591 5.012409 5.037236 5.062085 5.086973 5.111915 5.136926 #>  [57] 5.162024 5.187224 5.212543 5.238000 5.263612 5.289397 5.315377 5.341572 #>  [65] 5.368003 5.394693 5.421668 5.448953 5.476577 5.504569 5.532963 5.561792 #>  [73] 5.591097 5.620918 5.651302 5.682300 5.713967 5.746367 5.779571 5.813657 #>  [81] 5.848716 5.884850 5.922178 5.960838 6.000990 6.042824 6.086568 6.132497 #>  [89] 6.180947 6.232341 6.287214 6.346263 6.410420 6.480973 6.559780 6.649673 #>  [97] 6.755301 6.885177 7.057856 7.330079 #>  #>  #> $rroc #> $rroc$plots #>  #> $rroc$single_rROC #> $performances #> # A tibble: 126 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.621            100            100         1            0.00168 #>  2      2.81    0.624             99             99         1.02         0.00169 #>  3      3.03    0.626             98             98         1.04         0.00171 #>  4      3.18    0.629             97             97         1.06         0.00173 #>  5      3.30    0.625             97             96         1.07         0.00174 #>  6      3.40    0.627             96             95         1.10         0.00175 #>  7      3.48    0.630             95             94         1.12         0.00177 #>  8      3.55    0.633             94             93         1.14         0.00179 #>  9      3.62    0.629             94             92         1.16         0.00180 #> 10      3.68    0.632             93             91         1.18         0.00182 #> # ℹ 116 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>       auc auc_var_H0    rzAUC   pval_asym #> 1 0.62115    0.62115 2.960166 0.003074737 #>  #> $keep_highs #>         auc  auc_var_H0    rzAUC    pval_asym threshold #> 1 0.8113095 0.006150794 3.969418 7.204841e-05  5.796614 #>  #> $keep_lows #>       auc auc_var_H0    rzAUC   pval_asym threshold #> 1 0.62115   0.001675 2.960166 0.003074737       Inf #>  #> $max_total #>         auc  auc_var_H0    rzAUC    pval_asym threshold part #> 1 0.8113095 0.006150794 3.969418 7.204841e-05  5.796614 high #>  #> $positive_label #> [1] \"positive\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 100 controls (true_pred_df[[\"true\"]] FALSE) < 100 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.6212 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\" # sink()   filename <- file.path(paste0(main_plotname, \"_pos2norm_highdiff_v2.pdf\")) # pdf(filename, height = main_height * size_factor, width = main_width * size_factor) rroc_theo <- plot_rROC_theoretical(     qnorm_positive = function(x) {         retvec <- numeric(length(x))         for (i in seq_along(x)) {             if (i %% 10 == 0) {                 retvec[i] <- qnorm(x[i], 9, 1)             } else {                 retvec[i] <- qnorm(x[i], 5, 1)             }         }         return(retvec)     },     qnorm_negative = function(x) qnorm(x, mean = 5, sd = 1),     n_positive = n_positives,     n_negative = n_negatives,     return_all = TRUE ) print(plots_including_fpr(rroc_theo)) #> [[1]] #>  #> [[2]] #>  #> [[3]] #>  #> [[4]] #>  #> [[5]] # dev.off() # sink(paste0(filename, \".txt\")) print(rroc_theo) #> $data #> $data$positive #>   [1]  2.669921  2.942144  3.114823  3.244699  3.350327  3.440220  3.519027 #>   [8]  3.589580  3.653737  7.712786  3.767659  3.819053  3.867503  3.913432 #>  [15]  3.957176  3.999010  4.039162  4.077822  4.115150  8.151284  4.186343 #>  [22]  4.220429  4.253633  4.286033  4.317700  4.348698  4.379082  4.408903 #>  [29]  4.438208  8.467037  4.495431  4.523423  4.551047  4.578332  4.605307 #>  [36]  4.631997  4.658428  4.684623  4.710603  8.736388  4.762000  4.787457 #>  [43]  4.812776  4.837976  4.863074  4.888085  4.913027  4.937915  4.962764 #>  [50]  8.987591  5.012409  5.037236  5.062085  5.086973  5.111915  5.136926 #>  [57]  5.162024  5.187224  5.212543  9.238000  5.263612  5.289397  5.315377 #>  [64]  5.341572  5.368003  5.394693  5.421668  5.448953  5.476577  9.504569 #>  [71]  5.532963  5.561792  5.591097  5.620918  5.651302  5.682300  5.713967 #>  [78]  5.746367  5.779571  9.813657  5.848716  5.884850  5.922178  5.960838 #>  [85]  6.000990  6.042824  6.086568  6.132497  6.180947 10.232341  6.287214 #>  [92]  6.346263  6.410420  6.480973  6.559780  6.649673  6.755301  6.885177 #>  [99]  7.057856 11.330079 #>  #> $data$negative #>   [1] 2.669921 2.942144 3.114823 3.244699 3.350327 3.440220 3.519027 3.589580 #>   [9] 3.653737 3.712786 3.767659 3.819053 3.867503 3.913432 3.957176 3.999010 #>  [17] 4.039162 4.077822 4.115150 4.151284 4.186343 4.220429 4.253633 4.286033 #>  [25] 4.317700 4.348698 4.379082 4.408903 4.438208 4.467037 4.495431 4.523423 #>  [33] 4.551047 4.578332 4.605307 4.631997 4.658428 4.684623 4.710603 4.736388 #>  [41] 4.762000 4.787457 4.812776 4.837976 4.863074 4.888085 4.913027 4.937915 #>  [49] 4.962764 4.987591 5.012409 5.037236 5.062085 5.086973 5.111915 5.136926 #>  [57] 5.162024 5.187224 5.212543 5.238000 5.263612 5.289397 5.315377 5.341572 #>  [65] 5.368003 5.394693 5.421668 5.448953 5.476577 5.504569 5.532963 5.561792 #>  [73] 5.591097 5.620918 5.651302 5.682300 5.713967 5.746367 5.779571 5.813657 #>  [81] 5.848716 5.884850 5.922178 5.960838 6.000990 6.042824 6.086568 6.132497 #>  [89] 6.180947 6.232341 6.287214 6.346263 6.410420 6.480973 6.559780 6.649673 #>  [97] 6.755301 6.885177 7.057856 7.330079 #>  #>  #> $rroc #> $rroc$plots #>  #> $rroc$single_rROC #> $performances #> # A tibble: 111 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.546            100            100         1            0.00168 #>  2      2.81    0.546             99             99         1.02         0.00169 #>  3      3.03    0.547             98             98         1.04         0.00171 #>  4      3.18    0.548             97             97         1.06         0.00173 #>  5      3.30    0.549             96             96         1.09         0.00175 #>  6      3.40    0.550             95             95         1.11         0.00176 #>  7      3.48    0.551             94             94         1.13         0.00178 #>  8      3.55    0.553             93             93         1.16         0.00180 #>  9      3.62    0.554             92             92         1.18         0.00182 #> 10      3.68    0.555             91             91         1.21         0.00184 #> # ℹ 101 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>      auc auc_var_H0    rzAUC pval_asym #> 1 0.5455     0.5455 1.111742 0.2662491 #>  #> $keep_highs #>         auc auc_var_H0    rzAUC  pval_asym threshold #> 1 0.7631579 0.01236045 2.367006 0.01793265  6.206644 #>  #> $keep_lows #>      auc auc_var_H0    rzAUC pval_asym threshold #> 1 0.5455   0.001675 1.111742 0.2662491       Inf #>  #> $max_total #>         auc auc_var_H0    rzAUC  pval_asym threshold part #> 1 0.7631579 0.01236045 2.367006 0.01793265  6.206644 high #>  #> $positive_label #> [1] \"positive\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 100 controls (true_pred_df[[\"true\"]] FALSE) < 100 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.5455 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\" # sink()  # 4. Different mean + variance # 4.1 mean: positive > negative, var: positive > negative --> left-skewed filename <- file.path(paste0(main_plotname, \"_posGTneg_posVARGTneg.pdf\")) # pdf(filename, height = main_height * size_factor, width = main_width * size_factor) rroc_theo <- plot_rROC_theoretical(     qnorm_positive = function(x) qnorm(x, mean = 6, sd = 2),     qnorm_negative = function(x) qnorm(x, mean = 5, sd = 1),     n_positive = n_positives,     n_negative = n_negatives,     return_all = TRUE ) print(plots_including_fpr(rroc_theo)) #> [[1]] #>  #> [[2]] #>  #> [[3]] #>  #> [[4]] #>  #> [[5]] # dev.off() # sink(paste0(filename, \".txt\")) print(rroc_theo) #> $data #> $data$positive #>   [1]  1.339842  1.884288  2.229646  2.489399  2.700655  2.880440  3.038055 #>   [8]  3.179161  3.307475  3.425573  3.535318  3.638106  3.735007  3.826864 #>  [15]  3.914352  3.998020  4.078324  4.155644  4.230300  4.302569  4.372686 #>  [22]  4.440858  4.507265  4.572066  4.635401  4.697396  4.758164  4.817806 #>  [29]  4.876415  4.934075  4.990861  5.046846  5.102093  5.156664  5.210614 #>  [36]  5.263995  5.316857  5.369246  5.421205  5.472777  5.524000  5.574913 #>  [43]  5.625552  5.675952  5.726148  5.776171  5.826054  5.875830  5.925528 #>  [50]  5.975181  6.024819  6.074472  6.124170  6.173946  6.223829  6.273852 #>  [57]  6.324048  6.374448  6.425087  6.476000  6.527223  6.578795  6.630754 #>  [64]  6.683143  6.736005  6.789386  6.843336  6.897907  6.953154  7.009139 #>  [71]  7.065925  7.123585  7.182194  7.241836  7.302604  7.364599  7.427934 #>  [78]  7.492735  7.559142  7.627314  7.697431  7.769700  7.844356  7.921676 #>  [85]  8.001980  8.085648  8.173136  8.264993  8.361894  8.464682  8.574427 #>  [92]  8.692525  8.820839  8.961945  9.119560  9.299345  9.510601  9.770354 #>  [99] 10.115712 10.660158 #>  #> $data$negative #>   [1] 2.669921 2.942144 3.114823 3.244699 3.350327 3.440220 3.519027 3.589580 #>   [9] 3.653737 3.712786 3.767659 3.819053 3.867503 3.913432 3.957176 3.999010 #>  [17] 4.039162 4.077822 4.115150 4.151284 4.186343 4.220429 4.253633 4.286033 #>  [25] 4.317700 4.348698 4.379082 4.408903 4.438208 4.467037 4.495431 4.523423 #>  [33] 4.551047 4.578332 4.605307 4.631997 4.658428 4.684623 4.710603 4.736388 #>  [41] 4.762000 4.787457 4.812776 4.837976 4.863074 4.888085 4.913027 4.937915 #>  [49] 4.962764 4.987591 5.012409 5.037236 5.062085 5.086973 5.111915 5.136926 #>  [57] 5.162024 5.187224 5.212543 5.238000 5.263612 5.289397 5.315377 5.341572 #>  [65] 5.368003 5.394693 5.421668 5.448953 5.476577 5.504569 5.532963 5.561792 #>  [73] 5.591097 5.620918 5.651302 5.682300 5.713967 5.746367 5.779571 5.813657 #>  [81] 5.848716 5.884850 5.922178 5.960838 6.000990 6.042824 6.086568 6.132497 #>  [89] 6.180947 6.232341 6.287214 6.346263 6.410420 6.480973 6.559780 6.649673 #>  [97] 6.755301 6.885177 7.057856 7.330079 #>  #>  #> $rroc #> $rroc$plots #>  #> $rroc$single_rROC #> $performances #> # A tibble: 201 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.675            100            100         1            0.00168 #>  2      1.61    0.682             99            100         1.01         0.00168 #>  3      2.06    0.689             98            100         1.02         0.00169 #>  4      2.36    0.696             97            100         1.03         0.00170 #>  5      2.58    0.704             96            100         1.04         0.00171 #>  6      2.69    0.701             96             99         1.05         0.00172 #>  7      2.79    0.708             95             99         1.06         0.00173 #>  8      2.91    0.715             94             99         1.07         0.00174 #>  9      2.99    0.713             94             98         1.09         0.00175 #> 10      3.08    0.720             93             98         1.10         0.00176 #> # ℹ 191 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>      auc auc_var_H0    rzAUC    pval_asym #> 1 0.6754     0.6754 4.285704 1.821613e-05 #>  #> $keep_highs #>         auc  auc_var_H0    rzAUC    pval_asym threshold #> 1 0.7579832 0.001984127 5.791708 6.967407e-09  3.998515 #>  #> $keep_lows #>      auc auc_var_H0    rzAUC    pval_asym threshold #> 1 0.6754   0.001675 4.285704 1.821613e-05       Inf #>  #> $max_total #>         auc  auc_var_H0    rzAUC    pval_asym threshold part #> 1 0.7579832 0.001984127 5.791708 6.967407e-09  3.998515 high #>  #> $positive_label #> [1] \"positive\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 100 controls (true_pred_df[[\"true\"]] FALSE) < 100 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.6754 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\" # sink()  # 4.2 mean: positive > negative, var: positive < negative --> right-skewed filename <- file.path(paste0(main_plotname, \"_posGTneg_posVARLTneg.pdf\")) # pdf(filename, height = main_height * size_factor, width = main_width * size_factor) rroc_theo <- plot_rROC_theoretical(     qnorm_positive = function(x) qnorm(x, mean = 6, sd = 1),     qnorm_negative = function(x) qnorm(x, mean = 5, sd = 2),     n_positive = n_positives,     n_negative = n_negatives,     return_all = TRUE ) print(plots_including_fpr(rroc_theo)) #> [[1]] #>  #> [[2]] #>  #> [[3]] #>  #> [[4]] #>  #> [[5]] # dev.off() # sink(paste0(filename, \".txt\")) print(rroc_theo) #> $data #> $data$positive #>   [1] 3.669921 3.942144 4.114823 4.244699 4.350327 4.440220 4.519027 4.589580 #>   [9] 4.653737 4.712786 4.767659 4.819053 4.867503 4.913432 4.957176 4.999010 #>  [17] 5.039162 5.077822 5.115150 5.151284 5.186343 5.220429 5.253633 5.286033 #>  [25] 5.317700 5.348698 5.379082 5.408903 5.438208 5.467037 5.495431 5.523423 #>  [33] 5.551047 5.578332 5.605307 5.631997 5.658428 5.684623 5.710603 5.736388 #>  [41] 5.762000 5.787457 5.812776 5.837976 5.863074 5.888085 5.913027 5.937915 #>  [49] 5.962764 5.987591 6.012409 6.037236 6.062085 6.086973 6.111915 6.136926 #>  [57] 6.162024 6.187224 6.212543 6.238000 6.263612 6.289397 6.315377 6.341572 #>  [65] 6.368003 6.394693 6.421668 6.448953 6.476577 6.504569 6.532963 6.561792 #>  [73] 6.591097 6.620918 6.651302 6.682300 6.713967 6.746367 6.779571 6.813657 #>  [81] 6.848716 6.884850 6.922178 6.960838 7.000990 7.042824 7.086568 7.132497 #>  [89] 7.180947 7.232341 7.287214 7.346263 7.410420 7.480973 7.559780 7.649673 #>  [97] 7.755301 7.885177 8.057856 8.330079 #>  #> $data$negative #>   [1] 0.3398422 0.8842880 1.2296459 1.4893990 1.7006546 1.8804400 2.0380547 #>   [8] 2.1791609 2.3074747 2.4255725 2.5353183 2.6381059 2.7350069 2.8268638 #>  [15] 2.9143515 2.9980202 3.0783241 3.1556436 3.2303003 3.3025689 3.3726864 #>  [22] 3.4408585 3.5072653 3.5720658 3.6354007 3.6973958 3.7581637 3.8178060 #>  [29] 3.8764151 3.9340746 3.9908614 4.0468460 4.1020934 4.1566639 4.2106136 #>  [36] 4.2639948 4.3168567 4.3692455 4.4212051 4.4727768 4.5240002 4.5749133 #>  [43] 4.6255524 4.6759524 4.7261475 4.7761707 4.8260542 4.8758298 4.9255285 #>  [50] 4.9751813 5.0248187 5.0744715 5.1241702 5.1739458 5.2238293 5.2738525 #>  [57] 5.3240476 5.3744476 5.4250867 5.4759998 5.5272232 5.5787949 5.6307545 #>  [64] 5.6831433 5.7360052 5.7893864 5.8433361 5.8979066 5.9531540 6.0091386 #>  [71] 6.0659254 6.1235849 6.1821940 6.2418363 6.3026042 6.3645993 6.4279342 #>  [78] 6.4927347 6.5591415 6.6273136 6.6974311 6.7696997 6.8443564 6.9216759 #>  [85] 7.0019798 7.0856485 7.1731362 7.2649931 7.3618941 7.4646817 7.5744275 #>  [92] 7.6925253 7.8208391 7.9619453 8.1195600 8.2993454 8.5106010 8.7703541 #>  [99] 9.1157120 9.6601578 #>  #>  #> $rroc #> $rroc$plots #>  #> $rroc$single_rROC #> $performances #> # A tibble: 201 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1  -Inf        0.675            100            100         1            0.00168 #>  2     0.612    0.672            100             99         1.01         0.00168 #>  3     1.06     0.669            100             98         1.02         0.00169 #>  4     1.36     0.665            100             97         1.03         0.00170 #>  5     1.60     0.662            100             96         1.04         0.00171 #>  6     1.79     0.658            100             95         1.05         0.00172 #>  7     1.96     0.655            100             94         1.06         0.00173 #>  8     2.11     0.651            100             93         1.08         0.00174 #>  9     2.24     0.647            100             92         1.09         0.00175 #> 10     2.37     0.643            100             91         1.10         0.00176 #> # ℹ 191 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>      auc auc_var_H0    rzAUC    pval_asym #> 1 0.6754     0.6754 4.285704 1.821613e-05 #>  #> $keep_highs #>      auc auc_var_H0    rzAUC    pval_asym threshold #> 1 0.6754   0.001675 4.285704 1.821613e-05      -Inf #>  #> $keep_lows #>         auc  auc_var_H0    rzAUC    pval_asym threshold #> 1 0.7579832 0.001984127 5.791708 6.967407e-09  7.001485 #>  #> $max_total #>         auc  auc_var_H0    rzAUC    pval_asym threshold part #> 1 0.7579832 0.001984127 5.791708 6.967407e-09  7.001485  low #>  #> $positive_label #> [1] \"positive\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 100 controls (true_pred_df[[\"true\"]] FALSE) < 100 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.6754 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\" # sink()"},{"path":"https://ggrlab.github.io/restrictedROC/articles/paper_05_varying_mean_variance.html","id":"varying-mean","dir":"Articles","previous_headings":"","what":"Varying mean","title":"Paper 05: rROC with varying mean/variance","text":"","code":"n_positives <- 100 n_negatives <- 100 # how_many_values <- 50  # takes too long for vignette but was done for the paper how_many_values <- 5  vary_mu <- list() for (mean_positive in seq(from = 5, to = 9, length.out = how_many_values)) {     print(mean_positive)     tmp <- plot_rROC_theoretical(         qnorm_positive = function(x) qnorm(x, mean = mean_positive, sd = 2),         qnorm_negative = function(x) qnorm(x, mean = 5, sd = 1),         n_positive = n_positives,         n_negative = n_negatives,         return_all = TRUE     )     tmp[[\"rroc\"]][[\"plots\"]] <- tmp[[\"rroc\"]][[\"plots\"]] +         patchwork::plot_annotation(             subtitle = paste0(\"N(5, 1) < N(\", round(mean_positive, 2), \", 2)\")         )     vary_mu[[as.character(mean_positive)]] <- tmp } #> [1] 5 #> [1] 6 #> [1] 7 #> [1] 8 #> [1] 9 # pdf(\"res/paper/vary_means.pdf\") print(     lapply(vary_mu, function(x) {         tmp <- x[[\"rroc\"]][[\"plots\"]]         tmp[[1]] <- tmp[[1]] + xlim(c(-.5, 14))         return(tmp)     }) ) #> $`5` #>  #> $`6` #>  #> $`7` #>  #> $`8` #>  #> $`9` # dev.off()  globals <- lapply(vary_mu, function(x) unlist(x[[\"rroc\"]][[\"single_rROC\"]][[\"global\"]])) maxes <- lapply(vary_mu, function(x) unlist(x[[\"rroc\"]][[\"single_rROC\"]][[\"max_total\"]][-6])) maxes_part <- lapply(vary_mu, function(x) unlist(x[[\"rroc\"]][[\"single_rROC\"]][[\"max_total\"]][6]))  globals_df <- tibble::as_tibble(t(as.data.frame(globals))) globals_df$pos_mean <- as.numeric(names(globals)) globals_df$max_global <- \"global\" globals_df$threshold <- NA globals_df$part <- \"global\"  maxes_df <- tibble::as_tibble(t(as.data.frame(maxes))) maxes_df$pos_mean <- as.numeric(names(maxes)) maxes_df$part <- unlist(maxes_part) maxes_df$max_global <- \"restricted\"  total_df <- rbind(maxes_df, globals_df) # pdf(\"res/paper/vary_means_perfVSmean.pdf\") print(     total_df %>%         ggplot(aes(x = pos_mean, y = auc, col = max_global)) +         geom_point() +         ylab(\"(restricted) AUC\") +         xlab(\"Positive population mean\") +         guides(col = guide_legend(title = \"AUC\")) +         ggpubr::theme_pubr() ) print(     total_df %>%         ggplot(aes(x = pos_mean, y = rzAUC, col = max_global)) +         geom_point() +         ylab(\"(restricted) standarized AUC\") +         xlab(\"Positive population mean\") +         guides(col = guide_legend(title = \"rzAUC\")) +         ggpubr::theme_pubr() ) # dev.off()"},{"path":"https://ggrlab.github.io/restrictedROC/articles/paper_05_varying_mean_variance.html","id":"varying-sigma","dir":"Articles","previous_headings":"","what":"Varying sigma","title":"Paper 05: rROC with varying mean/variance","text":"","code":"vary_sigma <- list() for (sigma_positive in seq(from = 1, to = 5, length.out = how_many_values)) {     print(sigma_positive)     tmp <- plot_rROC_theoretical(         qnorm_positive = function(x) qnorm(x, mean = 7.5, sd = sigma_positive),         qnorm_negative = function(x) qnorm(x, mean = 5, sd = 1),         n_positive = n_positives,         n_negative = n_negatives,         return_all = TRUE     )     tmp[[\"rroc\"]][[\"plots\"]] <- tmp[[\"rroc\"]][[\"plots\"]] +         patchwork::plot_annotation(             subtitle = paste0(\"N(5, 1) < N(7, \", round(sigma_positive^2, 2), \")\")         )     vary_sigma[[as.character(sigma_positive)]] <- tmp } #> [1] 1 #> [1] 2 #> [1] 3 #> [1] 4 #> [1] 5  # pdf(\"res/paper/vary_sigma.pdf\") print(     lapply(vary_sigma, function(x) {         tmp <- x[[\"rroc\"]][[\"plots\"]]         tmp[[1]] <- tmp[[1]] + xlim(c(-.5, 14))         return(tmp)     }) ) #> $`1` #>  #> $`2` #>  #> $`3` #> Warning: Removed 18 rows containing non-finite outside the scale range #> (`stat_align()`). #> Warning: Removed 18 rows containing missing values or values outside the scale range #> (`geom_line()`). #> Removed 18 rows containing missing values or values outside the scale range #> (`geom_line()`). #>  #> $`4` #> Warning: Removed 112 rows containing non-finite outside the scale range #> (`stat_align()`). #> Warning: Removed 112 rows containing missing values or values outside the scale range #> (`geom_line()`). #> Removed 112 rows containing missing values or values outside the scale range #> (`geom_line()`). #>  #> $`5` #> Warning: Removed 190 rows containing non-finite outside the scale range #> (`stat_align()`). #> Warning: Removed 190 rows containing missing values or values outside the scale range #> (`geom_line()`). #> Removed 190 rows containing missing values or values outside the scale range #> (`geom_line()`). # dev.off()  globals <- lapply(vary_sigma, function(x) unlist(x[[\"rroc\"]][[\"single_rROC\"]][[\"global\"]])) maxes <- lapply(vary_sigma, function(x) unlist(x[[\"rroc\"]][[\"single_rROC\"]][[\"max_total\"]][-6])) maxes_part <- lapply(vary_sigma, function(x) unlist(x[[\"rroc\"]][[\"single_rROC\"]][[\"max_total\"]][6]))  globals_df <- tibble::as_tibble(t(as.data.frame(globals))) globals_df$pos_sigma <- as.numeric(names(globals)) globals_df$max_global <- \"global\" globals_df$threshold <- NA globals_df$part <- \"global\"  maxes_df <- tibble::as_tibble(t(as.data.frame(maxes))) maxes_df$pos_sigma <- as.numeric(names(maxes)) maxes_df$part <- unlist(maxes_part) maxes_df$max_global <- \"restricted\"  total_df <- rbind(maxes_df, globals_df) # pdf(\"res/paper/vary_sigma_perfVSsigma.pdf\") print(     total_df %>%         ggplot(aes(x = pos_sigma, y = auc, col = max_global)) +         geom_point() +         ylab(\"(restricted) AUC\") +         xlab(\"Positive population standard deviation\") +         guides(col = guide_legend(title = \"AUC\")) +         ggpubr::theme_pubr() ) print(     total_df %>%         ggplot(aes(x = pos_sigma, y = rzAUC, col = max_global)) +         geom_point() +         ylab(\"(restricted) standarized AUC\") +         xlab(\"Positive population standard deviation\") +         guides(col = guide_legend(title = \"rzAUC\")) +         ggpubr::theme_pubr() ) # dev.off() # save(vary_mu, vary_sigma, file = \"paper05_varies.rda\")"},{"path":"https://ggrlab.github.io/restrictedROC/articles/paper_05_varying_mean_variance.html","id":"animations","dir":"Articles","previous_headings":"","what":"Animations","title":"Paper 05: rROC with varying mean/variance","text":"animations, multiple packages also system programs necessary, therefore show code run creating vignette keep cross-platform running. following setup done create animations:","code":"pacman::p_install(\"gganimate\", force = FALSE) library(gganimate) # apt-get install -y libmagick++-dev pacman::p_install(\"magick\", force = FALSE) library(magick) pacman::p_install(\"rsvg\", force = FALSE) # sudo sed -i 's/disk\" value=\"1GiB/disk\" value=\"10GiB/g' /etc/ImageMagick-6/policy.xml # apt-get install -y libavfilter-dev pacman::p_install(\"av\", force = FALSE)"},{"path":"https://ggrlab.github.io/restrictedROC/articles/paper_05_varying_mean_variance.html","id":"mean","dir":"Articles","previous_headings":"Animations","what":"Mean","title":"Paper 05: rROC with varying mean/variance","text":"","code":"# load(file = \"paper05_varies.rda\")  globals <- lapply(vary_mu, function(x) unlist(x[[\"rroc\"]][[\"single_rROC\"]][[\"global\"]])) maxes <- lapply(vary_mu, function(x) unlist(x[[\"rroc\"]][[\"single_rROC\"]][[\"max_total\"]][-6])) maxes_part <- lapply(vary_mu, function(x) unlist(x[[\"rroc\"]][[\"single_rROC\"]][[\"max_total\"]][6]))  globals_df <- tibble::as_tibble(t(as.data.frame(globals))) globals_df$pos_mean <- as.numeric(names(globals)) globals_df$max_global <- \"global\" globals_df$threshold <- NA globals_df$part <- \"global\"  maxes_df <- tibble::as_tibble(t(as.data.frame(maxes))) maxes_df$pos_mean <- as.numeric(names(maxes)) maxes_df$part <- unlist(maxes_part) maxes_df$max_global <- \"restricted\"  mean_df <- rbind(maxes_df, globals_df)  animation_perf_mean <- mean_df %>%     ggplot(aes(x = pos_mean, y = auc, col = max_global)) +     geom_point() +     geom_line() +     ylab(\"(restricted) AUC\") +     xlab(\"Positive population mean\") +     guides(col = guide_legend(title = \"AUC\")) +     ggpubr::theme_pubr() +     transition_reveal(pos_mean)  dir.create(\"gifs\") unlink(\"gifs/animation_perf_mean/\", recursive = TRUE) gganimate::animate(     animation_perf_mean,     renderer = file_renderer(\"gifs/animation_perf_mean/\"),     nframes = length(unique(mean_df[[\"pos_mean\"]])),     width = 500, height = 500, # units='mm', res = 10,  # for png     # width = 500/90, height = 500/90, device = \"svg\" # svg: size to png seems to be with the factor 90 )  plots_rroc_mean <- lapply(vary_mu, function(x) {     tmp <- x[[\"rroc\"]][[\"plots\"]]     tmp[[1]] <- tmp[[1]] + xlim(c(-.5, 14))     tmp[[2]] <- tmp[[2]] + xlim(c(-.5, 14))     return(tmp) }) # create the single pngs which are later combined into a gif: unlink(\"gifs/plots_rroc_mean\", recursive = TRUE) dir.create(\"gifs/plots_rroc_mean\") png(filename = \"gifs/plots_rroc_mean/pplot_%03d.png\", width = 500, height = 500) print(plots_rroc_mean) dev.off()  anim_rroc_sigma <- list.files(\"gifs/plots_rroc_mean\", full.names = TRUE) %>%     image_read() anim_perf_sigma <- list.files(\"gifs/animation_perf_mean\", full.names = TRUE) %>%     image_read() combined_magick <- NA for (i in 1:length(anim_rroc_sigma)) {     tmp <- image_append(c(anim_rroc_sigma[i], anim_perf_sigma[i]))     if (i == 1) {         combined_magick <- tmp     } else {         combined_magick <- c(combined_magick, tmp)     } } dir.create(\"res/paper/gifs\") image_write_gif(combined_magick, \"res/paper/gifs/vary_mean.gif\", delay = .15) image_write_gif(combined_magick, \"res/paper/gifs/vary_mean_slow.gif\", delay = 1)  # # sudo apt-get install -y libavfilter-dev # pacman::p_install(\"av\") # magick::image_write_video(combined_magick, \"gifs/magick_video.mp4\")"},{"path":"https://ggrlab.github.io/restrictedROC/articles/paper_05_varying_mean_variance.html","id":"variance","dir":"Articles","previous_headings":"Animations","what":"Variance","title":"Paper 05: rROC with varying mean/variance","text":"","code":"# load(file = \"paper05_varies.rda\")  globals <- lapply(vary_sigma, function(x) unlist(x[[\"rroc\"]][[\"single_rROC\"]][[\"global\"]])) maxes <- lapply(vary_sigma, function(x) unlist(x[[\"rroc\"]][[\"single_rROC\"]][[\"max_total\"]][-6])) maxes_part <- lapply(vary_sigma, function(x) unlist(x[[\"rroc\"]][[\"single_rROC\"]][[\"max_total\"]][6]))  globals_df <- tibble::as_tibble(t(as.data.frame(globals))) globals_df$pos_sigma <- as.numeric(names(globals)) globals_df$max_global <- \"global\" globals_df$threshold <- NA globals_df$part <- \"global\"  maxes_df <- tibble::as_tibble(t(as.data.frame(maxes))) maxes_df$pos_sigma <- as.numeric(names(maxes)) maxes_df$part <- unlist(maxes_part) maxes_df$max_global <- \"restricted\" sigma_df <- rbind(maxes_df, globals_df)  animation_perf_sigma <- sigma_df %>%     ggplot(aes(x = pos_sigma, y = auc, col = max_global)) +     geom_point() +     geom_line() +     ylab(\"(restricted) AUC\") +     xlab(\"Positive population standard deviation\") +     guides(col = guide_legend(title = \"AUC\")) +     ggpubr::theme_pubr() +     transition_reveal(pos_sigma)  dir.create(\"gifs\") unlink(\"gifs/animation_perf_sigma/\", recursive = TRUE) gganimate::animate(     animation_perf_sigma,     renderer = file_renderer(\"gifs/animation_perf_sigma/\"),     nframes = length(unique(sigma_df[[\"pos_sigma\"]])),     width = 500, height = 500, # units='mm', res = 10,  # for png     # width = 500/90, height = 500/90, device = \"svg\" # svg: size to png seems to be with the factor 90 )  # gganimate::anim_save(\"gifs/removeme.gif\", animation_perf_sigma)  plots_rroc_sigma <- lapply(vary_sigma, function(x) {     tmp <- x[[\"rroc\"]][[\"plots\"]]     tmp[[1]] <- tmp[[1]] + xlim(c(-.5, 14))     tmp[[2]] <- tmp[[2]] + xlim(c(-.5, 14))     return(tmp) })  # create the single pngs which are later combined into a gif: unlink(\"gifs/plots_rroc_sigma\", recursive = TRUE) dir.create(\"gifs/plots_rroc_sigma\") png(filename = \"gifs/plots_rroc_sigma/pplot_%03d.png\", width = 500, height = 500) print(plots_rroc_sigma) dev.off()  anim_rroc_sigma <- list.files(\"gifs/plots_rroc_sigma\", full.names = TRUE) %>%     image_read() anim_perf_sigma <- list.files(\"gifs/animation_perf_sigma\", full.names = TRUE) %>%     image_read() combined_magick <- NA for (i in 1:length(anim_rroc_sigma)) {     tmp <- image_append(c(anim_rroc_sigma[i], anim_perf_sigma[i]))     if (i == 1) {         combined_magick <- tmp     } else {         combined_magick <- c(combined_magick, tmp)     } } dir.create(\"res/paper/gifs\") image_write_gif(combined_magick, \"res/paper/gifs/vary_sigma.gif\", delay = .15) image_write_gif(combined_magick, \"res/paper/gifs/vary_sigma_slow.gif\", delay = 1)  # # sudo apt-get install -y libavfilter-dev # pacman::p_install(\"av\") # magick::image_write_video(combined_magick, \"gifs/magick_video.mp4\")"},{"path":"https://ggrlab.github.io/restrictedROC/articles/paper_06_rROC_scaling_vs_recalculate.html","id":"scaling-and-recalculating-leads-to-the-same-rauc-shown-visually","dir":"Articles","previous_headings":"","what":"Scaling and recalculating leads to the same rAUC, shown visually","title":"Paper 06: rROC scaling/recalculating","text":"Applying scaling factor partial AUC complete ROC curve exactly recalculating AUC respective part values. ImageMagick installed can recreate GIF presented publication","code":"current_sim <- function(dists) {     restrictedROC::sim(dists, do_melt = FALSE, length.out = 100) } set.seed(129387) simdata <- current_sim(     list(         \"Positive\" = function(length.out) {             unif <- runif(length.out)             vapply(unif, function(x) {                 if (x > .2) {                     rnorm(1, mean = 6, sd = 1)                 } else {                     rnorm(1, mean = 9, sd = 1)                 }             }, numeric(1))         },         \"Negative\" = function(length.out) {             unif <- runif(length.out)             vapply(unif, function(x) {                 if (x > .02) {                     rnorm(1, mean = 6, sd = 1)                 } else {                     rnorm(1, mean = 9, sd = 1)                 }             }, numeric(1))         }     ) )  simdata_melted <- restrictedROC::melt_gendata(simdata) colnames(simdata_melted) <- c(\"predictions\", \"response\") simdata_melted$labels <- as.numeric(simdata_melted$response == \"Positive\") simple_df <- simdata_melted rroc <- restrictedROC::rROC(     simple_df,     positive_label = \"Positive\",     direction = \"<\",     return_proc = TRUE,     independent_vars = \"predictions\",     dependent_vars = \"response\",     n_permutations = 0 )[[\"response\"]][[\"predictions\"]][[\"permutation\"]] #> Wed May  8 16:38:30 2024      response predictions ( 1 )  include_part_auc_text <- TRUE plot_scale <- 1.5  roc_data_df <- data.frame(     \"original.predictor\" = rroc[[\"pROC_full\"]][[\"original.predictor\"]],     \"original.response\" = rroc[[\"pROC_full\"]][[\"original.response\"]] ) splitted_data <- split(roc_data_df[[\"original.predictor\"]], roc_data_df[[\"original.response\"]]) names(splitted_data) <- c(\"Negative\", \"Positive\") p_full_density_ROC <- plot_density_ROC_empirical(     values_grouped = splitted_data,     length.out = 1000,     xmin = 3, xmax = 11,     direction = \"<\",     levels = c(\"Negative\", \"Positive\") ) # pdf(paste0(main_plotname, \"p07_rroc_proc_scaling.pdf\"), width = 8 * plot_scale, height = 4 * plot_scale) # for (threshold_x in rroc$pROC_full$thresholds[5:185]) {  # all valid values for (threshold_x in rroc$pROC_full$thresholds[5:185][c(1, 10, 25, 50, 75, 100, 125, 150, 175)]) {     p_rroc_part <- plot_rROC_part(         rroc,         p_full_density_ROC = p_full_density_ROC,         threshold = threshold_x,         include_part_auc_text = TRUE     )     print(p_rroc_part$patchworked + patchwork::plot_annotation(tag_levels = \"A\")) } # dev.off()   # The following can only be done if imagemagick is installed # # apt install ImageMagick # command <- paste0(\"convert -verbose -delay 15 -loop 0 -density 100 \", paste0(main_plotname, \"p07_rroc_proc_scaling.pdf\"), \" \", paste0(main_plotname, \"p07_rroc_proc_scaling.gif\")) # system(command)"},{"path":"https://ggrlab.github.io/restrictedROC/articles/paper_07_rROC_twoway.html","id":"rroc-is-identical-regardless-of-which-is-the-positive-label","dir":"Articles","previous_headings":"","what":"rROC is identical regardless of which is the positive label","title":"Paper 07: rROC label swap","text":"","code":"current_sim <- function(dists) {     # restrictedROC::sim(dists, do_melt = FALSE, length.out = 2500)     restrictedROC::sim(dists, do_melt = FALSE, length.out = 100) } set.seed(129387) simdata <- current_sim(     list(         \"positive\" = function(length.out) {             unif <- runif(length.out)             vapply(unif, function(x) {                 if (x > .2) {                     rnorm(1, mean = 6, sd = 1)                 } else {                     rnorm(1, mean = 9, sd = 1)                 }             }, numeric(1))         },         \"negative\" = function(length.out) {             unif <- runif(length.out)             vapply(unif, function(x) {                 if (x > .02) {                     rnorm(1, mean = 6, sd = 1)                 } else {                     rnorm(1, mean = 9, sd = 1)                 }             }, numeric(1))         }     ) )  simdata_melted <- restrictedROC::melt_gendata(simdata) colnames(simdata_melted) <- c(\"predictor\", \"response\") plots_rroc_way_1 <- restrictedROC::plot_density_rROC_empirical(     values_grouped = simdata,     direction = \"<\",     positive_label = \"positive\" ) plots_rroc_way_2 <- restrictedROC::plot_density_rROC_empirical(     values_grouped = simdata,     direction = \"<\",     positive_label = \"negative\" )  # pdf(\"rzAUC_twoway_sim.pdf\", height = 6, width = 6) print(plots_rroc_way_1[[\"plots\"]] + ggplot2::theme(legend.position = \"none\")) print(plots_rroc_way_2[[\"plots\"]] + ggplot2::theme(legend.position = \"none\")) # dev.off()"},{"path":"https://ggrlab.github.io/restrictedROC/articles/paper_08_rROC_permutation_bias.html","id":"optimizing-rroc-introduces-a-bias-therefore-we-propose-permutation-p-values","dir":"Articles","previous_headings":"","what":"Optimizing rROC introduces a bias, therefore we propose permutation p-values","title":"Paper 08: rROC permutation","text":"","code":"current_sim <- function(dists) {     # restrictedROC::sim(dists, do_melt = FALSE, length.out = 2500)     restrictedROC::sim(dists, do_melt = FALSE, length.out = 100) # For vignette } set.seed(129387) simdata <- current_sim(     list(         \"positive\" = function(length.out) {             unif <- runif(length.out)             vapply(unif, function(x) {                 if (x > .2) {                     rnorm(1, mean = 6, sd = 1)                 } else {                     rnorm(1, mean = 9, sd = 1)                 }             }, numeric(1))         },         \"negative\" = function(length.out) {             unif <- runif(length.out)             vapply(unif, function(x) {                 if (x > .02) {                     rnorm(1, mean = 6, sd = 1)                 } else {                     rnorm(1, mean = 9, sd = 1)                 }             }, numeric(1))         }     ) )  simdata_melted <- restrictedROC::melt_gendata(simdata) colnames(simdata_melted) <- c(\"predictor\", \"response\") plots_rroc_way_1 <- restrictedROC::plot_density_rROC_empirical(     values_grouped = simdata,     direction = \"<\",     positive_label = \"positive\" ) rroc_way_permutation <- restrictedROC::simple_rROC_permutation(     response = simdata_melted[[\"response\"]],     predictor = simdata_melted[[\"predictor\"]],     direction = \"<\",     positive_label = \"positive\",     n_permutations = 250,     parallel_permutations = FALSE     ### The following has been done in publication     # n_permutations = 10000,     # parallel_permutations = TRUE )  # saveRDS(plots_rroc_way_1, \"plots_rroc_way_1.rds\") # saveRDS(rroc_way_permutation, \"rroc_way_permutation.rds\") # plots_rroc_way_1 <- readRDS(\"plots_rroc_way_1.rds\") # rroc_way_permutation <- readRDS(\"rroc_way_permutation.rds\")  perm_global_bound <- rroc_way_permutation[[\"perm_global_bound\"]][1:1000, ] perm_max_bound <- rroc_way_permutation[[\"perm_max_bound\"]][1:1000, ]  # pdf(\"rzAUC_permutation_bias_sim.pdf\", width = 6, height = 6) # Get the density plot from fig_rzauc_twoway, page 1, OR from here: print(plots_rroc_way_1[[\"plots\"]] + theme(legend.position = \"none\")) # dev.off()  # pdf(\"rzAUC_permutation_bias_sim_PERM.pdf\", width = 3.2, height = 3.2) print(     ggplot2::qplot(x = perm_global_bound[[\"auc\"]], y = perm_max_bound[[\"auc\"]]) +         geom_point(data = data.frame(             x = plots_rroc_way_1[[\"single_rROC\"]][[\"global\"]][[\"auc\"]],             y = plots_rroc_way_1[[\"single_rROC\"]][[\"max_total\"]][[\"auc\"]]         ), aes(x = x, y = y), col = \"red\", size = 3) +         xlab(\"Global AUC\") + ylab(\"Optimal restricted standardized AUC\") +         ggpubr::theme_pubr() +         geom_vline(xintercept = .5, linetype = \"dashed\") +         geom_hline(yintercept = .5, linetype = \"dashed\") ) #> Warning: `qplot()` was deprecated in ggplot2 3.4.0. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: Removed 750 rows containing missing values or values outside the scale range #> (`geom_point()`). print(     ggplot2::qplot(x = perm_global_bound[[\"rzAUC\"]], y = perm_max_bound[[\"rzAUC\"]]) +         geom_point(data = data.frame(             x = plots_rroc_way_1[[\"single_rROC\"]][[\"global\"]][[\"rzAUC\"]],             y = plots_rroc_way_1[[\"single_rROC\"]][[\"max_total\"]][[\"rzAUC\"]]         ), aes(x = x, y = y), col = \"red\", size = 3) +         xlab(\"Global rzAUC\") + ylab(\"Optimal restricted standardized rzAUC\") +         ggpubr::theme_pubr() +         geom_vline(xintercept = 0, linetype = \"dashed\") +         geom_hline(yintercept = 0, linetype = \"dashed\") ) #> Warning: Removed 750 rows containing missing values or values outside the scale range #> (`geom_point()`). print(     ggplot2::qplot(x = with(perm_global_bound, sign(rzAUC) * pval_asym), y = perm_max_bound[[\"pval_asym\"]]) +         ggplot2::scale_y_log10() +         ggplot2::geom_hline(yintercept = plots_rroc_way_1[[\"single_rROC\"]][[\"global\"]][[\"pval_asym\"]], col = \"red\") +         ggplot2::geom_hline(yintercept = 1, linetype = \"dashed\") +         ggpubr::theme_pubr() ) #> Warning: Removed 750 rows containing missing values or values outside the scale range #> (`geom_point()`). print(     ggplot2::qplot(x = perm_global_bound[[\"pval_asym\"]], y = perm_max_bound[[\"pval_asym\"]], col = factor(sign(perm_global_bound[[\"rzAUC\"]])), geom = \"blank\") +         ggplot2::geom_point(size = .5) +         ggplot2::scale_y_log10() +         ggplot2::geom_hline(yintercept = plots_rroc_way_1[[\"single_rROC\"]][[\"global\"]][[\"pval_asym\"]], col = \"red\") +         ggplot2::geom_hline(yintercept = 1, linetype = \"dashed\") +         ggpubr::theme_pubr() ) #> Warning: Removed 750 rows containing missing values or values outside the scale range #> (`geom_point()`). # dev.off()"},{"path":"https://ggrlab.github.io/restrictedROC/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gunther Glehr. Author, maintainer.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Glehr G (2024). restrictedROC: Calculate restricted ROC curves. R package version 3.3.4, https://ggrlab.github.io/restrictedROC/.","code":"@Manual{,   title = {restrictedROC: Calculate restricted ROC curves},   author = {Gunther Glehr},   year = {2024},   note = {R package version 3.3.4},   url = {https://ggrlab.github.io/restrictedROC/}, }"},{"path":"https://ggrlab.github.io/restrictedROC/index.html","id":"restrictedroc","dir":"","previous_headings":"","what":"Calculate restricted ROC curves","title":"Calculate restricted ROC curves","text":"restrictedROC calculates restricted ROC curves, permutation p-values, plots multivariate random forest models restriction.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate restricted ROC curves","text":"can install latest version restrictedROC like :","code":"devtools::install_github(\"ggrlab/restrictedROC\")"},{"path":"https://ggrlab.github.io/restrictedROC/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"Calculate restricted ROC curves","text":"Given dataset one dependent (outcome, binary) variable one independent (predictor, numeric) variables, e.g. value biomarker two groups patients, want know biomarker informative outcome. use outcome biomarker dependent independent variables, respectively. outcome factor two levels, biomarker numeric variable. convenient usage restrictedROC via rROC() function. important results restrictedROC::rROC() : (restricted) AUCs possible cutoffs predictor variable global maximal (including restrictions) AUC Permutation p-values global maximal AUC res_rroc nested list first level contains dependent variables (y). second level contains results independent variable (x). dependent + independent variable combination following results: plots: Plots, enabled, otherwise NA permutation: restrictedROC class element containing permutation result Given dataframe, can use arbitrary dependent independent variables (within dataframe) calculate restricted ROC curve combination. Additionally, list names set respective dependent (first level) independent (second level) variable names. single_result$permutation_pval refers permutation p-values : pval.twoside.global: global AUC samples used. usually known AUC calculated permutation p-value. pval.twoside.max: maximal (restricted unrestricted) AUC’s permutation p-value. particular example see significance level 0.05, global AUC insignificant, maximal AUC significant. tells data restricted limited informative range. single_result$global refers AUC, variance H0, standardized AUC, (asymptotic, permutation!) p-value using samples without restriction. see AUC 0.6016, p-value 0.08. significant significance level 0.05. single_result$max_total refers AUC, variance H0, standardized AUC, (asymptotic, permutation!) p-value, threshold(=restriction value) part data kept therefore within informative range. example, maximal AUC 0.9089, restriction value 9.377944 focus “low” part. Therefore, informative range biomarker < 9.378. particular, observe AUC much higher global AUC, p-value lower. data restricted informative range AUC calculated samples values within range. convenient way visualize data results: plot_density_rROC_empirical() effectively: Calls simple_rROC perform restriction Makes results readable simple_rROC_interpret() Plots original data restriction results","code":"set.seed(123) biodata <- data.frame(     outcome = factor(c(rep(\"Good\", 50), rep(\"Poor\", 50))),     biomarker = c(rnorm(50, 10, 3), rnorm(50, 9, 1)) ) head(biodata) #>   outcome biomarker #> 1    Good  8.318573 #> 2    Good  9.309468 #> 3    Good 14.676125 #> 4    Good 10.211525 #> 5    Good 10.387863 #> 6    Good 15.145195 # library(restrictedROC) set.seed(412) res_rroc <- restrictedROC::rROC(     x = biodata$biomarker,     y = biodata$outcome,     positive_label = \"Good\",     n_permutations = 100 # increase that in real data! ) #> Wed Dec  6 14:06:24 2023      y x ( 1 ) single_result <- res_rroc[[\"y\"]][[\"x\"]][[\"permutation\"]] set.seed(412) res_rroc <- restrictedROC::rROC(     x = biodata,     dependent_vars = c(\"outcome\"),     independent_vars = c(\"biomarker\"),     positive_label = \"Good\",     n_permutations = 100 # increase that in real data! ) #> Wed Dec  6 14:06:26 2023      outcome biomarker ( 1 ) single_result <- res_rroc[[\"outcome\"]][[\"biomarker\"]][[\"permutation\"]] print(round(single_result$permutation_pval, 3)) #>    pval.twoside.max pval.twoside.global      n_permutations  #>               0.010               0.069             100.000 print(single_result$global) #>      auc auc_var_H0   rzAUC pval_asym #> 1 0.6016     0.6016 1.75103 0.0799407 print(single_result$max_total) #>         auc  auc_var_H0    rzAUC    pval_asym threshold part #> 1 0.9089069 0.007759784 4.641941 3.451517e-06  9.377944 high grouped_data <- split(biodata$biomarker, biodata$outcome) png(\"man/figures/example.png\", width = 800, height = 800, res = 120) print(     restrictedROC::plot_density_rROC_empirical(         values_grouped = grouped_data,         positive_label = \"Good\"     ) ) #> $plots #>  #> $single_rROC #> $performances #> # A tibble: 101 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.602             50             50         1            0.00337 #>  2      4.52    0.614             49             50         1.02         0.00340 #>  3      5.57    0.627             48             50         1.04         0.00344 #>  4      6.20    0.64              47             50         1.06         0.00348 #>  5      6.40    0.654             46             50         1.09         0.00351 #>  6      6.61    0.668             45             50         1.11         0.00356 #>  7      6.66    0.684             44             50         1.14         0.00360 #>  8      6.74    0.677             44             49         1.16         0.00363 #>  9      6.86    0.693             43             49         1.19         0.00368 #> 10      7.19    0.709             42             49         1.21         0.00373 #> # ℹ 91 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>      auc auc_var_H0   rzAUC pval_asym #> 1 0.6016     0.6016 1.75103 0.0799407 #>  #> $keep_highs #>         auc  auc_var_H0    rzAUC    pval_asym threshold #> 1 0.9089069 0.007759784 4.641941 3.451517e-06  9.377944 #>  #> $keep_lows #>         auc  auc_var_H0     rzAUC  pval_asym threshold #> 1 0.2492063 0.006878307 -3.023958 0.00249491  9.306498 #>  #> $max_total #>         auc  auc_var_H0    rzAUC    pval_asym threshold part #> 1 0.9089069 0.007759784 4.641941 3.451517e-06  9.377944 high #>  #> $positive_label #> [1] \"Good\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 50 controls (true_pred_df[[\"true\"]] FALSE) < 50 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.6016 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\" dev.off() #> png  #>   2"},{"path":"https://ggrlab.github.io/restrictedROC/reference/apply_restriction.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a (nested list) of rROC results to new data — apply_restriction","title":"Apply a (nested list) of rROC results to new data — apply_restriction","text":"Restriction returns informative range tells samples discarded according predictor value. function applies restriction new dataset. Predictor values outside informative range imputed removed_impute.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/apply_restriction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a (nested list) of rROC results to new data — apply_restriction","text":"","code":"apply_restriction(object, newdata, feature = NA, removed_impute = -1)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/apply_restriction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a (nested list) of rROC results to new data — apply_restriction","text":"object (nested list) rROC results. See rROC details. newdata data frame predictor variables. feature current feature. object single restrictedROC object, name feature. object (nested list), name current list element. Example: list(\"outcome_1\"=list(\"feature_1\"=rroc_result)) feature \"feature_1\" rroc_result processed rroc_result detected. removed_impute value impute samples outside informative range.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/apply_restriction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a (nested list) of rROC results to new data — apply_restriction","text":"list three elements: predictions: data frame original predictor values imputed values. three columns: predictor original predictor value. keep logical vector indicates whether sample inside informative range. bounded imputed value. thresholds: data frame feature, threshold, part predictor used imputed value predictor values outside informative range. informative range : low: (-Inf, threshold] high: (threshold, Inf)","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/default_part_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"This code here defines global variables for the package restrictedROC — default_part_colors","title":"This code here defines global variables for the package restrictedROC — default_part_colors","text":"code defines global variables package restrictedROC","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/default_part_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This code here defines global variables for the package restrictedROC — default_part_colors","text":"","code":"default_part_colors"},{"path":"https://ggrlab.github.io/restrictedROC/reference/default_part_colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"This code here defines global variables for the package restrictedROC — default_part_colors","text":"object class character length 2.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/generate_density_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate values for given densities — generate_density_values","title":"Generate values for given densities — generate_density_values","text":"Generate values given list density functions range xmin xmax length.elements. Usually used directly plot_density_ROC()","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/generate_density_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate values for given densities — generate_density_values","text":"","code":"generate_density_values(   ...,   xmin = -1,   xmax = 1,   length.out = 100,   do_melt = TRUE )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/generate_density_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate values for given densities — generate_density_values","text":"... List multiple arguments density functions following form: positive = function(x) dnorm(x, mean = 0, sd = 1), negative = function(x) dnorm(x, mean = -1, sd = 1), negative2 = function(x) dnorm(x, mean = -3, sd = 1) xmin Minimum value given function(s) calculated xmax Maximum value given function(s) calculated length.many values generated xmin xmax? Used seq() do_melt TRUE, apply melt_gendata()","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/generate_density_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate values for given densities — generate_density_values","text":"","code":"list() or tibble::tibble()"},{"path":"https://ggrlab.github.io/restrictedROC/reference/generate_density_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate values for given densities — generate_density_values","text":"","code":"generate_density_values(     positive = function(x) dnorm(x, mean = 0, sd = 1),     negative = function(x) dnorm(x, mean = -1, sd = 1),     negative2 = function(x) dnorm(x, mean = -3, sd = 1) ) #> # A tibble: 400 × 2 #>     Value Distribution #>     <dbl> <chr>        #>  1 -1     x            #>  2 -0.980 x            #>  3 -0.960 x            #>  4 -0.939 x            #>  5 -0.919 x            #>  6 -0.899 x            #>  7 -0.879 x            #>  8 -0.859 x            #>  9 -0.838 x            #> 10 -0.818 x            #> # ℹ 390 more rows generate_density_values(     positive = function(x) dnorm(x, mean = 0, sd = 1),     xmin = 0, xmax = 1 ) #> # A tibble: 200 × 2 #>     Value Distribution #>     <dbl> <chr>        #>  1 0      x            #>  2 0.0101 x            #>  3 0.0202 x            #>  4 0.0303 x            #>  5 0.0404 x            #>  6 0.0505 x            #>  7 0.0606 x            #>  8 0.0707 x            #>  9 0.0808 x            #> 10 0.0909 x            #> # ℹ 190 more rows generate_density_values(     positive = function(x) dnorm(x, mean = 0, sd = 1),     do_melt = FALSE ) #> # A tibble: 100 × 2 #>         x positive #>     <dbl>    <dbl> #>  1 -1        0.242 #>  2 -0.980    0.247 #>  3 -0.960    0.252 #>  4 -0.939    0.257 #>  5 -0.919    0.261 #>  6 -0.899    0.266 #>  7 -0.879    0.271 #>  8 -0.859    0.276 #>  9 -0.838    0.281 #> 10 -0.818    0.285 #> # ℹ 90 more rows generate_density_values(     positive = function(x) dnorm(x, mean = 0, sd = 1),     do_melt = TRUE ) #> # A tibble: 200 × 2 #>     Value Distribution #>     <dbl> <chr>        #>  1 -1     x            #>  2 -0.980 x            #>  3 -0.960 x            #>  4 -0.939 x            #>  5 -0.919 x            #>  6 -0.899 x            #>  7 -0.879 x            #>  8 -0.859 x            #>  9 -0.838 x            #> 10 -0.818 x            #> # ℹ 190 more rows"},{"path":"https://ggrlab.github.io/restrictedROC/reference/melt_gendata.html","id":null,"dir":"Reference","previous_headings":"","what":"Melt generated data — melt_gendata","title":"Melt generated data — melt_gendata","text":"Melt data generated form lists. Given list data.frame elements, melt columnA columnB columnC Distribution Value columnA\t\t\txA_1 columnA\t\t\txA_2 ...\t\t\t\t... columnB\t\t\txB_2 ...\t\t\t\t... columnC\t\t\txC_2 ...\t\t\t\t...","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/melt_gendata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Melt generated data — melt_gendata","text":"","code":"melt_gendata(df)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/melt_gendata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Melt generated data — melt_gendata","text":"df List data.frame values.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/melt_gendata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Melt generated data — melt_gendata","text":"","code":"data.frame with two columns:     \"Distribution\"  Contains the name/colname of the respective value     \"Value\"         The value itself"},{"path":"https://ggrlab.github.io/restrictedROC/reference/melt_gendata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Melt generated data — melt_gendata","text":"","code":"a <- list(\"A\" = 1:3, \"B\" = 5:19) melt_gendata(a) #> # A tibble: 18 × 2 #>    Value Distribution #>    <int> <chr>        #>  1     1 A            #>  2     2 A            #>  3     3 A            #>  4     5 B            #>  5     6 B            #>  6     7 B            #>  7     8 B            #>  8     9 B            #>  9    10 B            #> 10    11 B            #> 11    12 B            #> 12    13 B            #> 13    14 B            #> 14    15 B            #> 15    16 B            #> 16    17 B            #> 17    18 B            #> 18    19 B             a <- data.frame(\"a\" = 1:10, \"b\" = 6:15) melt_gendata(a) #> # A tibble: 20 × 2 #>    Value Distribution #>    <int> <chr>        #>  1     1 a            #>  2     2 a            #>  3     3 a            #>  4     4 a            #>  5     5 a            #>  6     6 a            #>  7     7 a            #>  8     8 a            #>  9     9 a            #> 10    10 a            #> 11     6 b            #> 12     7 b            #> 13     8 b            #> 14     9 b            #> 15    10 b            #> 16    11 b            #> 17    12 b            #> 18    13 b            #> 19    14 b            #> 20    15 b"},{"path":"https://ggrlab.github.io/restrictedROC/reference/merge_applied.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge (cbind) applied rROC results — merge_applied","title":"Merge (cbind) applied rROC results — merge_applied","text":"Merge (cbind) applied rROC results","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/merge_applied.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge (cbind) applied rROC results — merge_applied","text":"","code":"merge_applied(   rroc_applied,   which_preds = c(\"all\", \"all_split\", \"predictor\", \"bounded\", \"keep\") )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/merge_applied.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge (cbind) applied rROC results — merge_applied","text":"rroc_applied single outcome result apply_restriction() which_preds predictions returned? Default . can also specify \"all_split\" return list predictions type prediction (e.g. \"predictor\", \"bounded\", \"keep\"). can specify subset types (e.g. c(\"predictor\", \"bounded\")), bound predictions including predictions types returned.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/perf_ROC.html","id":null,"dir":"Reference","previous_headings":"","what":"Performance of ROC curves — perf_ROC","title":"Performance of ROC curves — perf_ROC","text":"Performance ROC curves","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/perf_ROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance of ROC curves — perf_ROC","text":"","code":"perf_ROC(response, predictor, how = \"pROC\", positive_label = NULL, ...)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/perf_ROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance of ROC curves — perf_ROC","text":"response vector containing true class labels. Care important class positive class predictions ordered according restriction predictor vector containing predictions. Previously, allowed \"pROC\" \"ROCR\", now allow \"pROC\" way faster. positive_label Label positive class ... arguments perf_pROC()","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/perf_ROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performance of ROC curves — perf_ROC","text":"List perf:\t\t\tResult perf_pROC(), comes pROC::coords() auc:\t\t\tArea ROC curve, comes pROC::auc() positive_label: Label positive class auc_variance:\tVariance AUC Nullhypothesis: $$\\frac{n_{positives} + n_{negatives} + 1}{12\\cdot n_{positives} \\cdot n_{negatives}}$$ rzAUC:\t\t\trestricted standardized AUC, combines calculated AUC variance.","code":"Looks then e.g. like:  $perf  # A tibble: 110 × 5        tp    fp   tpr   fpr threshold     <dbl> <dbl> <dbl> <dbl>     <dbl>   1    41    72 1     1       -Inf   2    41    71 1     0.986      3.44   3    40    71 0.976 0.986      4.24   4    40    70 0.976 0.972      4.82   5    40    69 0.976 0.958      5.11   6    39    69 0.951 0.958      5.18   7    38    69 0.927 0.958      5.28   8    37    69 0.902 0.958      5.68   9    37    68 0.902 0.944      6.00  10    37    67 0.902 0.931      6.15  # … with 100 more rows  # ℹ Use `print(n = ...)` to see more rows   $auc  [1] 0.611958   $positive_label  [1] \"Poor\"   $auc_variance  [1] 0.003218157   $rzAUC  [1] 1.973565"},{"path":"https://ggrlab.github.io/restrictedROC/reference/perf_ROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performance of ROC curves — perf_ROC","text":"","code":"data(aSAH, package = \"pROC\") if (FALSE) { # ROCR is not implemented anymore perf_ROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     how = \"ROCR\" ) } perf_ROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     how = \"pROC\" ) #> Setting levels: control = Good, case = Poor #> Setting direction: controls < cases #> $perf #> # A tibble: 110 × 5 #>       tp    fp   tpr   fpr threshold #>    <dbl> <dbl> <dbl> <dbl>     <dbl> #>  1    41    72 1     1       -Inf    #>  2    41    71 1     0.986      3.44 #>  3    40    71 0.976 0.986      4.24 #>  4    40    70 0.976 0.972      4.82 #>  5    40    69 0.976 0.958      5.11 #>  6    39    69 0.951 0.958      5.18 #>  7    38    69 0.927 0.958      5.28 #>  8    37    69 0.902 0.958      5.68 #>  9    37    68 0.902 0.944      6.00 #> 10    37    67 0.902 0.931      6.15 #> # ℹ 100 more rows #>  #> $auc #> [1] 0.611958 #>  #> $positive_label #> [1] \"Poor\" #>  #> $auc_variance #> [1] 0.003218157 #>  #> $rzAUC #> [1] 1.973565 #>  perf_ROC(     response = aSAH$outcome,     predictor = aSAH$ndka ) #> Setting levels: control = Good, case = Poor #> Setting direction: controls < cases #> $perf #> # A tibble: 110 × 5 #>       tp    fp   tpr   fpr threshold #>    <dbl> <dbl> <dbl> <dbl>     <dbl> #>  1    41    72 1     1       -Inf    #>  2    41    71 1     0.986      3.44 #>  3    40    71 0.976 0.986      4.24 #>  4    40    70 0.976 0.972      4.82 #>  5    40    69 0.976 0.958      5.11 #>  6    39    69 0.951 0.958      5.18 #>  7    38    69 0.927 0.958      5.28 #>  8    37    69 0.902 0.958      5.68 #>  9    37    68 0.902 0.944      6.00 #> 10    37    67 0.902 0.931      6.15 #> # ℹ 100 more rows #>  #> $auc #> [1] 0.611958 #>  #> $positive_label #> [1] \"Poor\" #>  #> $auc_variance #> [1] 0.003218157 #>  #> $rzAUC #> [1] 1.973565 #>  a <- perf_ROC(     response = aSAH$outcome,     predictor = aSAH$ndka ) #> Setting levels: control = Good, case = Poor #> Setting direction: controls < cases"},{"path":"https://ggrlab.github.io/restrictedROC/reference/perf_pROC.html","id":null,"dir":"Reference","previous_headings":"","what":"Performance ROC curves (pROC) — perf_pROC","title":"Performance ROC curves (pROC) — perf_pROC","text":"Performance ROC curves (pROC)","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/perf_pROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance ROC curves (pROC) — perf_pROC","text":"","code":"perf_pROC(   response,   predictor,   quiet = FALSE,   coords_ret = c(\"tp\", \"fp\", \"tpr\", \"fpr\", \"threshold\"),   ... )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/perf_pROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance ROC curves (pROC) — perf_pROC","text":"response vector containing true class labels. Care important class positive class predictions ordered according restriction predictor vector containing predictions. quiet Parameter pROC::roc coords_ret Coordinates pROC::coords() returned \"perf\"-listelement ... parameters pROC::roc","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/perf_pROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performance ROC curves (pROC) — perf_pROC","text":"List perf:\t\t\tResult perf_pROC(), comes pROC::coords() auc:\t\t\tArea ROC curve, comes pROC::auc() positive_label: Label positive class","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/perf_pROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performance ROC curves (pROC) — perf_pROC","text":"","code":"data(aSAH, package = \"pROC\") restrictedROC:::perf_pROC(     response = aSAH$outcome,     predictor = aSAH$ndka ) #> Setting levels: control = Good, case = Poor #> Setting direction: controls < cases #> $perf #> # A tibble: 110 × 5 #>       tp    fp   tpr   fpr threshold #>    <dbl> <dbl> <dbl> <dbl>     <dbl> #>  1    41    72 1     1       -Inf    #>  2    41    71 1     0.986      3.44 #>  3    40    71 0.976 0.986      4.24 #>  4    40    70 0.976 0.972      4.82 #>  5    40    69 0.976 0.958      5.11 #>  6    39    69 0.951 0.958      5.18 #>  7    38    69 0.927 0.958      5.28 #>  8    37    69 0.902 0.958      5.68 #>  9    37    68 0.902 0.944      6.00 #> 10    37    67 0.902 0.931      6.15 #> # ℹ 100 more rows #>  #> $auc #> [1] 0.611958 #>  #> $positive_label #> [1] \"Poor\" #>  restrictedROC:::perf_pROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     levels = c(\"Poor\", \"Good\"), # response-values for NEGATIVE and POSITIVE     direction = \"<\" # predictions of positives are higher than negatives ) #> $perf #> # A tibble: 110 × 5 #>       tp    fp   tpr   fpr threshold #>    <dbl> <dbl> <dbl> <dbl>     <dbl> #>  1    72    41 1     1       -Inf    #>  2    71    41 0.986 1          3.44 #>  3    71    40 0.986 0.976      4.24 #>  4    70    40 0.972 0.976      4.82 #>  5    69    40 0.958 0.976      5.11 #>  6    69    39 0.958 0.951      5.18 #>  7    69    38 0.958 0.927      5.28 #>  8    69    37 0.958 0.902      5.68 #>  9    68    37 0.944 0.902      6.00 #> 10    67    37 0.931 0.902      6.15 #> # ℹ 100 more rows #>  #> $auc #> [1] 0.388042 #>  #> $positive_label #> [1] \"Good\" #>  restrictedROC:::perf_pROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     levels = c(\"Poor\", \"Good\"), # response-values for NEGATIVE and POSITIVE     direction = \">\" # predictions of positives are higher than negatives ) #> $perf #> # A tibble: 110 × 5 #>       tp    fp   tpr   fpr threshold #>    <dbl> <dbl> <dbl> <dbl>     <dbl> #>  1    72    41 1     1         Inf   #>  2    72    40 1     0.976     250.  #>  3    71    40 0.986 0.976      76.4 #>  4    71    39 0.986 0.951      65.7 #>  5    70    39 0.972 0.951      56.8 #>  6    70    38 0.972 0.927      52.4 #>  7    69    38 0.958 0.927      48.8 #>  8    69    37 0.958 0.902      47.2 #>  9    68    37 0.944 0.902      44.1 #> 10    67    37 0.931 0.902      40.9 #> # ℹ 100 more rows #>  #> $auc #> [1] 0.611958 #>  #> $positive_label #> [1] \"Good\" #>  restrictedROC:::perf_pROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     levels = c(\"Good\", \"Poor\"), # response-values for NEGATIVE and POSITIVE     direction = \"<\" # predictions of positives are higher than negatives ) #> $perf #> # A tibble: 110 × 5 #>       tp    fp   tpr   fpr threshold #>    <dbl> <dbl> <dbl> <dbl>     <dbl> #>  1    41    72 1     1       -Inf    #>  2    41    71 1     0.986      3.44 #>  3    40    71 0.976 0.986      4.24 #>  4    40    70 0.976 0.972      4.82 #>  5    40    69 0.976 0.958      5.11 #>  6    39    69 0.951 0.958      5.18 #>  7    38    69 0.927 0.958      5.28 #>  8    37    69 0.902 0.958      5.68 #>  9    37    68 0.902 0.944      6.00 #> 10    37    67 0.902 0.931      6.15 #> # ℹ 100 more rows #>  #> $auc #> [1] 0.611958 #>  #> $positive_label #> [1] \"Poor\" #>"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_ROC_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"ROC curve for given cumulative distribution functions — plot_ROC_cdf","title":"ROC curve for given cumulative distribution functions — plot_ROC_cdf","text":"ROC curve given cumulative distribution functions","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_ROC_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ROC curve for given cumulative distribution functions — plot_ROC_cdf","text":"","code":"plot_ROC_cdf(   cdf_positive,   cdf_negative,   xmin = -1,   xmax = 1,   length.out = 1000 )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_ROC_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ROC curve for given cumulative distribution functions — plot_ROC_cdf","text":"cdf_positive Cumulative distribution function positive class cdf_negative Cumulative distribution function negative class xmin Minimum value simulated points plots distributions. length.points generated [xmin, xmax]. PURELY VISUAL, ROC curves calculated based actual distributions! xmax Maximum value simulated points plots distributions. length.points generated [xmin, xmax]. PURELY VISUAL, ROC curves calculated based actual distributions! length.number simulated points plots distributions. length.points generated [xmin, xmax]. PURELY VISUAL, ROC curves calculated based actual distributions!","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_ROC_cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ROC curve for given cumulative distribution functions — plot_ROC_cdf","text":"ggplot ROC-curve","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_ROC_cdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ROC curve for given cumulative distribution functions — plot_ROC_cdf","text":"","code":"plot_ROC_cdf(     cdf_positive = function(x) pnorm(x, mean = 1, sd = 1),     cdf_negative = function(x) pnorm(x, mean = 0, sd = 1),     xmin = -5, xmax = 15, length.out = 2500 )  plot_ROC_cdf(     cdf_positive = function(x) pnorm(x, mean = 1, sd = 1.5),     cdf_negative = function(x) pnorm(x, mean = 0, sd = 1),     xmin = -5, xmax = 15, length.out = 2500 )  plot_ROC_cdf(     cdf_positive = function(x) pnorm(x, mean = 1, sd = 2.5),     cdf_negative = function(x) pnorm(x, mean = 0, sd = 1),     xmin = -5, xmax = 15, length.out = 2500 )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_ROC_theoretical.html","id":null,"dir":"Reference","previous_headings":"","what":"ROC curve for positive cumulative distribution and negative quantile function — plot_ROC_theoretical","title":"ROC curve for positive cumulative distribution and negative quantile function — plot_ROC_theoretical","text":"ROC curve positive cumulative distribution negative quantile function","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_ROC_theoretical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ROC curve for positive cumulative distribution and negative quantile function — plot_ROC_theoretical","text":"","code":"plot_ROC_theoretical(pnorm_positive, qnorm_negative, length.out = 500)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_ROC_theoretical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ROC curve for positive cumulative distribution and negative quantile function — plot_ROC_theoretical","text":"pnorm_positive Cumulative distribution function positive class qnorm_negative Quantile function (inverse cumulative distribution function) negative class length.many false positive rates ROC-curve calculated ?","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_ROC_theoretical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ROC curve for positive cumulative distribution and negative quantile function — plot_ROC_theoretical","text":"List - ggplot ROC curve - AUC curve","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_ROC_theoretical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ROC curve for positive cumulative distribution and negative quantile function — plot_ROC_theoretical","text":"","code":"plot_ROC_theoretical(     pnorm_positive = function(x) pnorm(x, mean = 1, sd = 1),     qnorm_negative = function(x) qnorm(x, mean = 1, sd = .5) ) #> $plot  #>  #> $auc #> 0.5 with absolute error < 5.6e-15 #>"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot density + ROC — plot_density_ROC","title":"Plot density + ROC — plot_density_ROC","text":"Given positive negative distributions, plot corresponding densities ROC-curves.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot density + ROC — plot_density_ROC","text":"","code":"plot_density_ROC(   density_positive,   cdf_positive,   density_negative,   quantile_negative,   length.out = 500,   xmin = -3,   xmax = 3,   colors_pos_neg_both = colors_pos_neg_both_default )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot density + ROC — plot_density_ROC","text":"density_positive function(x) {}: Returns density given specific value x. Refers values coming \"positive\"-class. cdf_positive function(q) {...}: Returns cumulative distribution value given specific quantile q. Refers values coming \"positive\"-class. density_negative function(x) {}: Returns density given specific value x. Refers values coming \"negative\"-class. quantile_negative function(x) {}: Returns density given specific value x. Refers values coming \"negative\"-class. length.number simulated points plots distributions. length.points generated [xmin, xmax]. PURELY VISUAL, ROC curves calculated based actual distributions! xmin Minimum value simulated points plots distributions. length.points generated [xmin, xmax]. PURELY VISUAL, ROC curves calculated based actual distributions! xmax Maximum value simulated points plots distributions. length.points generated [xmin, xmax]. PURELY VISUAL, ROC curves calculated based actual distributions! colors_pos_neg_both Colors positive (\"+\"), negative (\"-\") overlapping \"+/-\" areas densities","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot density + ROC — plot_density_ROC","text":"patchwork'ed ggplots: left density, right ROC curve.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot density + ROC — plot_density_ROC","text":"","code":"plot_density_ROC(     density_positive = function(x) dnorm(x, mean = 0, sd = 1),     cdf_positive = function(x) pnorm(x, mean = 0, sd = 1),     density_negative = function(x) dnorm(x, mean = -1, sd = 1.5),     quantile_negative = function(x) qnorm(x, mean = -1, sd = 1.5),     xmin = -4, xmax = 7 ) #> $plot  #>  #> $auc #> 0.7104501 with absolute error < 8.1e-05 #>"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC_empirical.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot density + ROC — plot_density_ROC_empirical","title":"Plot density + ROC — plot_density_ROC_empirical","text":"Given positive negative distributions, plot corresponding densities ROC-curves.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC_empirical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot density + ROC — plot_density_ROC_empirical","text":"","code":"plot_density_ROC_empirical(   values_grouped,   length.out = 500,   xmin = -3,   xmax = 3,   ... )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC_empirical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot density + ROC — plot_density_ROC_empirical","text":"values_grouped List-like element. (also data.frames matrices) elements samples different distributions. E.g.: # tibble: 1,000 × 2 dist_1 dist_2  1  0.974  0.257 2  0.196 -0.780 3 -0.125 -0.264 4  0.701  0.260 length.See plot_density_empirical(). Granularity density plot (pure visualization). xmin See plot_density_empirical(). xmax See plot_density_empirical(). ... arguments perf_ROC()","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC_empirical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot density + ROC — plot_density_ROC_empirical","text":"patchwork'ed ggplots: left density, right ROC curve.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC_empirical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot density + ROC — plot_density_ROC_empirical","text":"","code":"sim_samples <- sim(     list(         \"dist_1\" = function(x) rnorm(x, mean = 1, sd = 1),         \"dist_2\" = function(x) rnorm(x, mean = 0, sd = 1)     ),     do_melt = FALSE,     length.out = 1000 ) plot_density_ROC_empirical(sim_samples) #> Setting levels: control = dist_1, case = dist_2 #> Setting direction: controls > cases"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot density + ROC based on stats::_ — plot_density_ROC_str","title":"Plot density + ROC based on stats::_ — plot_density_ROC_str","text":"Given positive negative distribution NAMES arguments, plot corresponding densities ROC-curves.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot density + ROC based on stats::_ — plot_density_ROC_str","text":"","code":"plot_density_ROC_str(   dist_positive_str = \"norm\",   dist_negative = \"norm\",   dist_positive_args = list(mean = 0, sd = 1),   dist_negative_args = list(mean = 0, sd = 1),   length.out = 500,   xmin = -3,   xmax = 3 )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot density + ROC based on stats::_ — plot_density_ROC_str","text":"dist_positive_str name distribution stats:: package. E.g. \"norm\", \"binom\", \"exp\". distribution values coming \"positive\"-class. possible distributions check ?stats::Distributions dist_negative name distribution stats:: package. E.g. \"norm\", \"binom\", \"exp\". distribution values coming \"negative\"-class. possible distributions check ?stats::Distributions dist_positive_args Arguments dist_positive_str named list. dist_negative_args Arguments dist_negative_str named list. length.number simulated points plots distributions. length.points generated [xmin, xmax]. PURELY VISUAL, ROC curves calculated based actual distributions! xmin Minimum value simulated points plots distributions. length.points generated [xmin, xmax]. PURELY VISUAL, ROC curves calculated based actual distributions! xmax Maximum value simulated points plots distributions. length.points generated [xmin, xmax]. PURELY VISUAL, ROC curves calculated based actual distributions!","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC_str.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot density + ROC based on stats::_ — plot_density_ROC_str","text":"patchwork'ed ggplots: left density, right ROC curve.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_ROC_str.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot density + ROC based on stats::_ — plot_density_ROC_str","text":"","code":"plot_density_ROC_str(length.out = 50) #> $plot  #>  #> $auc #> 0.5 with absolute error < 5.6e-15 #>  plot_density_ROC_str(     dist_positive_str = \"norm\",     dist_negative = \"norm\",     dist_positive_args = list(\"mean\" = 0, \"sd\" = 1),     dist_negative_args = list(\"mean\" = 1, \"sd\" = 1),     xmin = -4, xmax = 7,     length.out = 50 ) #> $plot  #>  #> $auc #> 0.23975 with absolute error < 4.9e-05 #>  # pdf(\"removeme.pdf\", width = 14, height = 6) plot_density_ROC_str(     dist_positive_str = \"norm\",     dist_negative = \"norm\",     dist_positive_args = list(\"mean\" = 1, \"sd\" = 1),     dist_negative_args = list(\"mean\" = 0, \"sd\" = 1),     xmin = -4, xmax = 7,     length.out = 50 ) #> $plot  #>  #> $auc #> 0.76025 with absolute error < 4.9e-05 #>  # dev.off() # pdf(\"removeme_2.pdf\", width = 14, height = 6) plot_density_ROC_str(     dist_positive_str = \"norm\",     dist_negative = \"norm\",     dist_positive_args = list(\"mean\" = 1, \"sd\" = .5),     dist_negative_args = list(\"mean\" = 1, \"sd\" = 1),     xmin = -4, xmax = 7,     length.out = 50 ) #> $plot  #>  #> $auc #> 0.5 with absolute error < 5.6e-15 #>  # dev.off() # pdf(\"removeme_3.pdf\", width = 14, height = 6) plot_density_ROC_str(     dist_positive_str = \"norm\",     dist_negative = \"norm\",     dist_positive_args = list(\"mean\" = 1, \"sd\" = 2),     dist_negative_args = list(\"mean\" = 1, \"sd\" = 1),     xmin = -4, xmax = 7,     length.out = 50 ) #> $plot  #>  #> $auc #> 0.5 with absolute error < 5.6e-15 #>  # dev.off() tmp <- plot_density_ROC_str(     dist_positive_str = \"norm\",     dist_negative = \"norm\",     dist_positive_args = list(\"mean\" = 1, \"sd\" = 2),     dist_negative_args = list(\"mean\" = 1, \"sd\" = 1),     xmin = -4, xmax = 7,     length.out = 50 )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_empirical.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot empirical densities kernel estimate — plot_density_empirical","title":"Plot empirical densities kernel estimate — plot_density_empirical","text":"2 list elements data.frame columns, NotImplemented error.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_empirical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot empirical densities kernel estimate — plot_density_empirical","text":"","code":"plot_density_empirical(   df,   xmin = NULL,   xmax = NULL,   n_density = 512,   length.out = 250,   colors_pos_neg_both = colors_pos_neg_both_default,   positive_label = NULL,   ... )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_empirical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot empirical densities kernel estimate — plot_density_empirical","text":"df data.frame list values. names legends, values used estimate densities. xmin given, densities restricted/shown value xmax given, densities restricted/shown value n_density Parameter density(), documentation: number equally spaced points density estimated. n > 512, rounded power 2 calculations (fft used) final result interpolated approx. almost always makes sense specify n power two. length.calculating density, many values used plot density colors_pos_neg_both Colors positive (\"+\"), negative (\"-\") overlapping \"+/-\" areas densities positive_label positive_label given, set \"+\" density. ... Convenience, used function though.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_empirical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot empirical densities kernel estimate — plot_density_empirical","text":"ggplot empirical densities","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_empirical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot empirical densities kernel estimate — plot_density_empirical","text":"","code":"1. Calculates density estimates per list-element/column with [density()] 2. Approximates the estimated densities with [stats::approx()] for equally spaced `length.out` elements between xmin and xmax 3. If `positive_label` is given, set this as the \"+\" density."},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_empirical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot empirical densities kernel estimate — plot_density_empirical","text":"","code":"sim_samples <- sim(     list(         \"dist_1\" = function(x) rnorm(x, mean = 1, sd = 1),         \"dist_2\" = function(x) rnorm(x, mean = 0, sd = 1)     ),     do_melt = FALSE ) plot_density_empirical(sim_samples)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_rROC_empirical.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot 4 rROC plots — plot_density_rROC_empirical","title":"Plot 4 rROC plots — plot_density_rROC_empirical","text":"","code":"A, Top-left:        Given positive and negative distributions, plot the corresponding densities. B, Top-right:       Corresponding ROC curve C, Bottom-left:     False positive rate VS threshold D, Bottom-right:    rzAUC plot for markerHIGH and markerLOW restricted parts, the rzAUC is shown"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_rROC_empirical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot 4 rROC plots — plot_density_rROC_empirical","text":"","code":"plot_density_rROC_empirical(   values_grouped,   length.out = 500,   xmin = NA,   xmax = NA,   single_rROC = NULL,   positive_label = NULL,   direction = \"<\",   part_colors = default_part_colors,   plot_thresholds = TRUE,   plot_thresholds_fpr = TRUE,   plot_n_points = NA )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_rROC_empirical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot 4 rROC plots — plot_density_rROC_empirical","text":"values_grouped List-like element. (also data.frames matrices) elements samples different distributions. E.g.: # tibble: 1,000 × 2 dist_1 dist_2  1  0.974  0.257 2  0.196 -0.780 3 -0.125 -0.264 4  0.701  0.260 length.See plot_density_empirical(). Granularity density plot (pure visualization). xmin See plot_density_empirical(). xmax See plot_density_empirical(). single_rROC Optional, given, rROC calculated fly. positive_label Positive label calculating ROC curve densities. NULL, automatically generated data. direction See pROC::roc(), \"<\" implemented. part_colors Default: default_part_colors vector c(\"high\"=COLOR_A, \"low\"=COLOR_B) colors high-value (markerHIGH) low-value (markerLOW) parts calculating restricted ROC. plot_thresholds Plot optimal restrictions high/low part max_total (best overall) plot_thresholds_fpr Plot max_total threshold plots B, C D plot_n_points Plot n random actual data points distribution geom_jitter_scaling(). NA, points plotted. plot points use Inf.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_rROC_empirical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot 4 rROC plots — plot_density_rROC_empirical","text":"patchwork'ed ggplots, see Description meaning.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_rROC_empirical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot 4 rROC plots — plot_density_rROC_empirical","text":"","code":"For further description see our publication on restricted ROC curves."},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_density_rROC_empirical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot 4 rROC plots — plot_density_rROC_empirical","text":"","code":"sim_samples <- sim(     list(         \"dist_1\" = function(x) rnorm(x, mean = 1, sd = 1),         \"dist_2\" = function(x) rnorm(x, mean = 0, sd = 1)     ),     do_melt = FALSE,     length.out = 50 ) plot_density_rROC_empirical(sim_samples) #> Positive label not given, setting to max(response): dist_2 #> $plots  #>  #> $single_rROC #> $performances #> # A tibble: 101 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.321             50             50         1            0.00337 #>  2     -2.35    0.328             49             50         1.02         0.00340 #>  3     -2.05    0.335             48             50         1.04         0.00344 #>  4     -1.61    0.342             47             50         1.06         0.00348 #>  5     -1.34    0.349             46             50         1.09         0.00351 #>  6     -1.31    0.357             45             50         1.11         0.00356 #>  7     -1.21    0.365             44             50         1.14         0.00360 #>  8     -1.12    0.373             43             50         1.16         0.00364 #>  9     -1.07    0.382             42             50         1.19         0.00369 #> 10     -1.05    0.392             41             50         1.22         0.00374 #> # ℹ 91 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>      auc auc_var_H0     rzAUC   pval_asym #> 1 0.3212     0.3212 -3.081537 0.002059345 #>  #> $keep_highs #>      auc  auc_var_H0     rzAUC   pval_asym threshold #> 1 0.3212 0.003366667 -3.081537 0.002059345      -Inf #>  #> $keep_lows #>      auc  auc_var_H0     rzAUC   pval_asym threshold #> 1 0.3212 0.003366667 -3.081537 0.002059345       Inf #>  #> $max_total #>      auc  auc_var_H0     rzAUC   pval_asym threshold   part #> 1 0.3212 0.003366667 -3.081537 0.002059345      -Inf global #>  #> $positive_label #> [1] \"dist_2\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 50 controls (true_pred_df[[\"true\"]] FALSE) < 50 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.3212 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\"          #>  plot_density_rROC_empirical(sim_samples, positive_label = \"dist_1\") #> $plots  #>  #> $single_rROC #> $performances #> # A tibble: 101 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.679             50             50         1            0.00337 #>  2     -2.35    0.672             50             49         1.02         0.00340 #>  3     -2.05    0.665             50             48         1.04         0.00344 #>  4     -1.61    0.658             50             47         1.06         0.00348 #>  5     -1.34    0.651             50             46         1.09         0.00351 #>  6     -1.31    0.643             50             45         1.11         0.00356 #>  7     -1.21    0.635             50             44         1.14         0.00360 #>  8     -1.12    0.627             50             43         1.16         0.00364 #>  9     -1.07    0.618             50             42         1.19         0.00369 #> 10     -1.05    0.608             50             41         1.22         0.00374 #> # ℹ 91 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>      auc auc_var_H0    rzAUC   pval_asym #> 1 0.6788     0.6788 3.081537 0.002059345 #>  #> $keep_highs #>      auc  auc_var_H0    rzAUC   pval_asym threshold #> 1 0.6788 0.003366667 3.081537 0.002059345      -Inf #>  #> $keep_lows #>      auc  auc_var_H0    rzAUC   pval_asym threshold #> 1 0.6788 0.003366667 3.081537 0.002059345       Inf #>  #> $max_total #>      auc  auc_var_H0    rzAUC   pval_asym threshold   part #> 1 0.6788 0.003366667 3.081537 0.002059345      -Inf global #>  #> $positive_label #> [1] \"dist_1\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 50 controls (true_pred_df[[\"true\"]] FALSE) < 50 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.6788 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\"          #>  plot_density_rROC_empirical(sim_samples, positive_label = \"dist_2\") #> $plots  #>  #> $single_rROC #> $performances #> # A tibble: 101 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.321             50             50         1            0.00337 #>  2     -2.35    0.328             49             50         1.02         0.00340 #>  3     -2.05    0.335             48             50         1.04         0.00344 #>  4     -1.61    0.342             47             50         1.06         0.00348 #>  5     -1.34    0.349             46             50         1.09         0.00351 #>  6     -1.31    0.357             45             50         1.11         0.00356 #>  7     -1.21    0.365             44             50         1.14         0.00360 #>  8     -1.12    0.373             43             50         1.16         0.00364 #>  9     -1.07    0.382             42             50         1.19         0.00369 #> 10     -1.05    0.392             41             50         1.22         0.00374 #> # ℹ 91 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>      auc auc_var_H0     rzAUC   pval_asym #> 1 0.3212     0.3212 -3.081537 0.002059345 #>  #> $keep_highs #>      auc  auc_var_H0     rzAUC   pval_asym threshold #> 1 0.3212 0.003366667 -3.081537 0.002059345      -Inf #>  #> $keep_lows #>      auc  auc_var_H0     rzAUC   pval_asym threshold #> 1 0.3212 0.003366667 -3.081537 0.002059345       Inf #>  #> $max_total #>      auc  auc_var_H0     rzAUC   pval_asym threshold   part #> 1 0.3212 0.003366667 -3.081537 0.002059345      -Inf global #>  #> $positive_label #> [1] \"dist_2\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 50 controls (true_pred_df[[\"true\"]] FALSE) < 50 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.3212 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\"          #>  plot_density_rROC_empirical(sim_samples, part_colors = c(\"high\" = \"green\", \"low\" = \"yellow\")) #> Positive label not given, setting to max(response): dist_2 #> $plots  #>  #> $single_rROC #> $performances #> # A tibble: 101 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.321             50             50         1            0.00337 #>  2     -2.35    0.328             49             50         1.02         0.00340 #>  3     -2.05    0.335             48             50         1.04         0.00344 #>  4     -1.61    0.342             47             50         1.06         0.00348 #>  5     -1.34    0.349             46             50         1.09         0.00351 #>  6     -1.31    0.357             45             50         1.11         0.00356 #>  7     -1.21    0.365             44             50         1.14         0.00360 #>  8     -1.12    0.373             43             50         1.16         0.00364 #>  9     -1.07    0.382             42             50         1.19         0.00369 #> 10     -1.05    0.392             41             50         1.22         0.00374 #> # ℹ 91 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>      auc auc_var_H0     rzAUC   pval_asym #> 1 0.3212     0.3212 -3.081537 0.002059345 #>  #> $keep_highs #>      auc  auc_var_H0     rzAUC   pval_asym threshold #> 1 0.3212 0.003366667 -3.081537 0.002059345      -Inf #>  #> $keep_lows #>      auc  auc_var_H0     rzAUC   pval_asym threshold #> 1 0.3212 0.003366667 -3.081537 0.002059345       Inf #>  #> $max_total #>      auc  auc_var_H0     rzAUC   pval_asym threshold   part #> 1 0.3212 0.003366667 -3.081537 0.002059345      -Inf global #>  #> $positive_label #> [1] \"dist_2\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 50 controls (true_pred_df[[\"true\"]] FALSE) < 50 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.3212 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\"          #>  plot_density_rROC_empirical(sim_samples, plot_thresholds = FALSE) #> Positive label not given, setting to max(response): dist_2 #> $plots  #>  #> $single_rROC #> $performances #> # A tibble: 101 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.321             50             50         1            0.00337 #>  2     -2.35    0.328             49             50         1.02         0.00340 #>  3     -2.05    0.335             48             50         1.04         0.00344 #>  4     -1.61    0.342             47             50         1.06         0.00348 #>  5     -1.34    0.349             46             50         1.09         0.00351 #>  6     -1.31    0.357             45             50         1.11         0.00356 #>  7     -1.21    0.365             44             50         1.14         0.00360 #>  8     -1.12    0.373             43             50         1.16         0.00364 #>  9     -1.07    0.382             42             50         1.19         0.00369 #> 10     -1.05    0.392             41             50         1.22         0.00374 #> # ℹ 91 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>      auc auc_var_H0     rzAUC   pval_asym #> 1 0.3212     0.3212 -3.081537 0.002059345 #>  #> $keep_highs #>      auc  auc_var_H0     rzAUC   pval_asym threshold #> 1 0.3212 0.003366667 -3.081537 0.002059345      -Inf #>  #> $keep_lows #>      auc  auc_var_H0     rzAUC   pval_asym threshold #> 1 0.3212 0.003366667 -3.081537 0.002059345       Inf #>  #> $max_total #>      auc  auc_var_H0     rzAUC   pval_asym threshold   part #> 1 0.3212 0.003366667 -3.081537 0.002059345      -Inf global #>  #> $positive_label #> [1] \"dist_2\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 50 controls (true_pred_df[[\"true\"]] FALSE) < 50 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.3212 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\"          #>  plot_density_rROC_empirical(sim_samples, plot_thresholds_fpr = FALSE) #> Positive label not given, setting to max(response): dist_2 #> $plots  #>  #> $single_rROC #> $performances #> # A tibble: 101 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.321             50             50         1            0.00337 #>  2     -2.35    0.328             49             50         1.02         0.00340 #>  3     -2.05    0.335             48             50         1.04         0.00344 #>  4     -1.61    0.342             47             50         1.06         0.00348 #>  5     -1.34    0.349             46             50         1.09         0.00351 #>  6     -1.31    0.357             45             50         1.11         0.00356 #>  7     -1.21    0.365             44             50         1.14         0.00360 #>  8     -1.12    0.373             43             50         1.16         0.00364 #>  9     -1.07    0.382             42             50         1.19         0.00369 #> 10     -1.05    0.392             41             50         1.22         0.00374 #> # ℹ 91 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>      auc auc_var_H0     rzAUC   pval_asym #> 1 0.3212     0.3212 -3.081537 0.002059345 #>  #> $keep_highs #>      auc  auc_var_H0     rzAUC   pval_asym threshold #> 1 0.3212 0.003366667 -3.081537 0.002059345      -Inf #>  #> $keep_lows #>      auc  auc_var_H0     rzAUC   pval_asym threshold #> 1 0.3212 0.003366667 -3.081537 0.002059345       Inf #>  #> $max_total #>      auc  auc_var_H0     rzAUC   pval_asym threshold   part #> 1 0.3212 0.003366667 -3.081537 0.002059345      -Inf global #>  #> $positive_label #> [1] \"dist_2\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 50 controls (true_pred_df[[\"true\"]] FALSE) < 50 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.3212 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\"          #>     tmp <- simple_rROC(     response = melt_gendata(sim_samples)[[\"Distribution\"]],     predictor = melt_gendata(sim_samples)[[\"Value\"]],     direction = \"<\",     positive_label = \"dist_1\",     return_proc = TRUE ) single_rROC <- simple_rROC_interpret(tmp) plot_density_rROC_empirical(sim_samples, single_rROC = single_rROC) #> $plots  #>  #> $single_rROC #> $performances #> # A tibble: 101 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.679             50             50         1            0.00337 #>  2     -2.35    0.672             50             49         1.02         0.00340 #>  3     -2.05    0.665             50             48         1.04         0.00344 #>  4     -1.61    0.658             50             47         1.06         0.00348 #>  5     -1.34    0.651             50             46         1.09         0.00351 #>  6     -1.31    0.643             50             45         1.11         0.00356 #>  7     -1.21    0.635             50             44         1.14         0.00360 #>  8     -1.12    0.627             50             43         1.16         0.00364 #>  9     -1.07    0.618             50             42         1.19         0.00369 #> 10     -1.05    0.608             50             41         1.22         0.00374 #> # ℹ 91 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>      auc auc_var_H0    rzAUC   pval_asym #> 1 0.6788     0.6788 3.081537 0.002059345 #>  #> $keep_highs #>      auc  auc_var_H0    rzAUC   pval_asym threshold #> 1 0.6788 0.003366667 3.081537 0.002059345      -Inf #>  #> $keep_lows #>      auc  auc_var_H0    rzAUC   pval_asym threshold #> 1 0.6788 0.003366667 3.081537 0.002059345       Inf #>  #> $max_total #>      auc  auc_var_H0    rzAUC   pval_asym threshold   part #> 1 0.6788 0.003366667 3.081537 0.002059345      -Inf global #>  #> $positive_label #> [1] \"dist_1\" #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 50 controls (true_pred_df[[\"true\"]] FALSE) < 50 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.6788 #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\"          #>"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_distributions_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot exactly 2 distributions — plot_distributions_2","title":"Plot exactly 2 distributions — plot_distributions_2","text":"Plot exactly 2 distributions","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_distributions_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot exactly 2 distributions — plot_distributions_2","text":"","code":"plot_distributions_2(   df,   colors_pos_neg_both = colors_pos_neg_both_default,   name_dist_1 = \"Positive\",   name_dist_2 = \"Negative\" )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_distributions_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot exactly 2 distributions — plot_distributions_2","text":"df Table distribution values. E.g.: # tibble: 1,000 × 2 Positive  Negative  1  0.974     0.257 2  0.196    -0.780 3 -0.125    -0.264 4  0.701     0.260 colors_pos_neg_both Colors positive (+), negative (-) overlapping (+/-) density-areas name_dist_1 Name first distribution (first column) name_dist_2 Name second distribution (second column)","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_distributions_2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot exactly 2 distributions — plot_distributions_2","text":"ggplot object","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_distributions_2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot exactly 2 distributions — plot_distributions_2","text":"","code":"# See e.g. plot_density_ROC_empirical()"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_distributions_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot multiple (usually >2) distributions — plot_distributions_multiple","title":"Plot multiple (usually >2) distributions — plot_distributions_multiple","text":"Plot multiple (usually >2) distributions","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_distributions_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot multiple (usually >2) distributions — plot_distributions_multiple","text":"","code":"plot_distributions_multiple(df_melted, ...)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_distributions_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot multiple (usually >2) distributions — plot_distributions_multiple","text":"df_melted melted data.frame/tibble values (x) distribution names (Distribution) E.g.: # tibble: 1,000 × 2 x  Distribution  1  0.974             2  0.196             3 -0.125             4  0.701             B 5  1.701             B 6  0.311             B ... UNUSED parameters compliant plot_distributions_2","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_distributions_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot multiple (usually >2) distributions — plot_distributions_multiple","text":"ggplot object filled densities","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_distributions_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot multiple (usually >2) distributions — plot_distributions_multiple","text":"","code":"sim_samples <- sim(     list(         \"dist_1\" = function(x) rnorm(x, mean = 1, sd = 1),         \"dist_2\" = function(x) rnorm(x, mean = 0, sd = 1)     ),     do_melt = FALSE )  density_estimates <- lapply(sim_samples, density, n = 100) eval_seq <- seq(from = -5, to = 1, length.out = 250) density_approximations <- tibble::as_tibble(vapply(density_estimates, function(densX) {     stats::approx(densX[[\"x\"]], densX[[\"y\"]], eval_seq)[[\"y\"]] }, numeric(length(eval_seq)))) density_approximations[[\"x\"]] <- eval_seq density_approximations_long <- tidyr::pivot_longer(     density_approximations,     cols = names(density_approximations)[names(density_approximations) != \"x\"],     names_to = \"Distribution\",     values_to = \"Probability density\" )  restrictedROC:::plot_distributions_multiple(density_approximations_long)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC.html","id":null,"dir":"Reference","previous_headings":"","what":"plot ROC including AUC significance — plot_rROC","title":"plot ROC including AUC significance — plot_rROC","text":"Plot complete ROC curve corresponding AUCs.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot ROC including AUC significance — plot_rROC","text":"","code":"plot_rROC(   x,   col_rzAUC = \"#999999\",   part = c(\"high\", \"low\"),   part_colors = default_part_colors,   split_roc_score = FALSE )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot ROC including AUC significance — plot_rROC","text":"x rROC result simple_rROC, simple_rROC_interpret rROC. col_rzAUC Color rzAUC points split_roc_score=FALSE part \"high\", \"low\" multiple part_colors Colors part split_roc_score Shoult ROC score (rzAUC) separate plot (\"TRUE\") inside ROC curve plot (\"FALSE\")","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot ROC including AUC significance — plot_rROC","text":"List multiple ggplot elements, always \"roc\", split_roc_score=TRUE also single \"rzAUC\" plot","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot ROC including AUC significance — plot_rROC","text":"","code":"# See also test-plot_rROC() data(aSAH, package = \"pROC\") simple_rROC_res <- simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka ) #> Positive label not given, setting to last level of factor: Poor single_rROC <- simple_rROC_interpret(simple_rROC_res) plot_rROC(     single_rROC,     split_roc_score = TRUE ) #> $roc  #>  #> $rzAUC  #>  plot_rROC(     single_rROC,     split_roc_score = FALSE ) #> Warning: Multiple parts given, plot only the first (high) #> $roc #> Warning: All aesthetics have length 1, but the data has 110 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.  #>  plot_rROC(     single_rROC,     split_roc_score = FALSE,     part = \"high\" ) #> $roc #> Warning: All aesthetics have length 1, but the data has 110 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.  #>  plot_rROC(     single_rROC,     split_roc_score = FALSE,     part = \"low\" ) #> $roc #> Warning: All aesthetics have length 1, but the data has 110 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.  #>"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_joint.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ROC curve with rzAUC values inside — plot_rROC_joint","title":"Plot ROC curve with rzAUC values inside — plot_rROC_joint","text":"Plot ROC curve rzAUC values inside","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_joint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ROC curve with rzAUC values inside — plot_rROC_joint","text":"","code":"plot_rROC_joint(roc_part, df, part, col_rzAUC)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_joint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ROC curve with rzAUC values inside — plot_rROC_joint","text":"roc_part data.frame true positive rate (tpr) false positive rate (fpr) plot ROC curve df data.frame single_rROC$perf   part \"high\" (markerHIGH part, bottom-left part ROC curve) \"low\" (markerLOW part, top-right part ROC curve) col_rzAUC Color rzAUC points","code":"single_rROC <- simple_rROC_interpret(simple_rROC(         response = aSAH$outcome,         predictor = aSAH$ndka     ))"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_joint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ROC curve with rzAUC values inside — plot_rROC_joint","text":"ggplot object two axes: 1. Usual ROC curve 2. rzAUC plot second axis","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_joint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ROC curve with rzAUC values inside — plot_rROC_joint","text":"","code":"# See plot_rROC()"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_part.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot (restricted) ROC curves — plot_rROC_part","title":"Plot (restricted) ROC curves — plot_rROC_part","text":"Plot every tpr/fpr combination: Full density Full ROC + selection rectangles (orange + blue) + Full AUC + orange+blue partial AUCs + scaling factor + name rectangle sides + orange+blue partial AUCs SCALED ROCs selections + Full AUCs + Color rectangle around plot Densities selections","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_part.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot (restricted) ROC curves — plot_rROC_part","text":"","code":"plot_rROC_part(   x,   p_full_density_ROC = NA,   threshold = NA,   fpr = NA,   color_high = default_part_colors[\"high\"],   color_low = default_part_colors[\"low\"],   include_part_auc_text = FALSE )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_part.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot (restricted) ROC curves — plot_rROC_part","text":"x rROC result including full_pROC. p_full_density_ROC Density plot plot_density_ROC_empirical full data, given calculated rROC_res threshold threshold split high low. Alternatively, give false positive rate (fpr) fpr false positive rate (approximately) cutoff made color_high Color high part color_low Color low part include_part_auc_text text-annotations added ?","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_part.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot (restricted) ROC curves — plot_rROC_part","text":"patchworked plots, see description.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_part.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot (restricted) ROC curves — plot_rROC_part","text":"","code":"library(restrictedROC) data(aSAH, package = \"pROC\") ret_procs <- simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     return_proc = TRUE ) #> Positive label not given, setting to last level of factor: Poor # pdf(\"removeme.pdf\") print(plot_rROC_part(ret_procs, fpr = .5)) #> $plotlist #> $plotlist$A  #>  #> $plotlist$B  #>  #> $plotlist$C  #>  #> $plotlist$D  #>  #> $plotlist$E  #>  #> $plotlist$F  #>  #>  #> $patchworked  #>  # dev.off()"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_single.html","id":null,"dir":"Reference","previous_headings":"","what":"plot ROC including AUC significance — plot_rROC_single","title":"plot ROC including AUC significance — plot_rROC_single","text":"Plot complete ROC curve corresponding AUCs.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot ROC including AUC significance — plot_rROC_single","text":"","code":"plot_rROC_single(   rROC_result,   col_rzAUC = \"#999999\",   part = c(\"high\", \"low\"),   part_colors = default_part_colors,   split_roc_score = FALSE )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot ROC including AUC significance — plot_rROC_single","text":"rROC_result rROC result :   col_rzAUC Color rzAUC points split_roc_score=FALSE part \"high\", \"low\" multiple part_colors Colors part split_roc_score Shoult ROC score (rzAUC) separate plot (\"TRUE\") inside ROC curve plot (\"FALSE\")","code":"single_rROC <- simple_rROC_interpret(simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka     ))"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot ROC including AUC significance — plot_rROC_single","text":"List multiple ggplot elements, always \"roc\", split_roc_score=TRUE also single \"rzAUC\" plot","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot ROC including AUC significance — plot_rROC_single","text":"","code":"data(aSAH, package = \"pROC\") simple_rROC_res <- simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka ) #> Positive label not given, setting to last level of factor: Poor single_rROC <- simple_rROC_interpret(simple_rROC_res) plot_rROC(     single_rROC,     split_roc_score = TRUE ) #> $roc  #>  #> $rzAUC  #>  plot_rROC(     single_rROC,     split_roc_score = FALSE ) #> Warning: Multiple parts given, plot only the first (high) #> $roc #> Warning: All aesthetics have length 1, but the data has 110 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.  #>  plot_rROC(     single_rROC,     split_roc_score = FALSE,     part = \"high\" ) #> $roc #> Warning: All aesthetics have length 1, but the data has 110 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.  #>  plot_rROC(     single_rROC,     split_roc_score = FALSE,     part = \"low\" ) #> $roc #> Warning: All aesthetics have length 1, but the data has 110 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row.  #>"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_theoretical.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot (restricted) ROC curves for theoretic distributions — plot_rROC_theoretical","title":"Plot (restricted) ROC curves for theoretic distributions — plot_rROC_theoretical","text":"Plot (restricted) ROC curves theoretic distributions","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_theoretical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot (restricted) ROC curves for theoretic distributions — plot_rROC_theoretical","text":"","code":"plot_rROC_theoretical(   qnorm_positive,   qnorm_negative,   length.out_densityplot = 500,   n_positive = 500,   n_negative = 500,   return_all = FALSE,   ... )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_theoretical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot (restricted) ROC curves for theoretic distributions — plot_rROC_theoretical","text":"qnorm_positive Quantile distribution function positive class qnorm_negative Quantile distribution function negative class length.out_densityplot Number points draw density plot per curve n_positive Number positive samples. n_negative Number negative samples. return_all true, also return rROC result, plots ... arguments plot_density_rROC_empirical()","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_theoretical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot (restricted) ROC curves for theoretic distributions — plot_rROC_theoretical","text":"return_all: List \"data\" \"rroc\" result Else: \"plots\" \"rroc\" result","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rROC_theoretical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot (restricted) ROC curves for theoretic distributions — plot_rROC_theoretical","text":"","code":"plot_rROC_theoretical(     qnorm_positive = function(x) qnorm(x, mean = 1, sd = 1),     qnorm_negative = function(x) qnorm(x, mean = 0, sd = 1) )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rzAUCs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rzAUC vs FPR — plot_rzAUCs","title":"Plot rzAUC vs FPR — plot_rzAUCs","text":"","code":"Plot rzAUCs for all calculated parts"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rzAUCs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rzAUC vs FPR — plot_rzAUCs","text":"","code":"plot_rzAUCs(   rROC_result,   part = c(\"high\", \"low\"),   part_colors = default_part_colors )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rzAUCs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rzAUC vs FPR — plot_rzAUCs","text":"rROC_result rROC result :   part vector parts shown, can multiple part_colors Named vector part receive color","code":"single_rROC <- simple_rROC_interpret(simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka     ))"},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rzAUCs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot rzAUC vs FPR — plot_rzAUCs","text":"ggplot object rzAUCs shown false positive rates. one FPR multiple values can exist.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/plot_rzAUCs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot rzAUC vs FPR — plot_rzAUCs","text":"","code":"# See plot_rROC()"},{"path":"https://ggrlab.github.io/restrictedROC/reference/predict.restrictedROC.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 class predict for class ","title":"S3 class predict for class ","text":"Predict new samples given restrictedROC result","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/predict.restrictedROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 class predict for class ","text":"","code":"# S3 method for restrictedROC predict(   object,   newdata,   newdata_predictor_column = 1,   newdata_response_column = 2,   pred_high_label = 1,   pred_low_label = 0,   original.response = NA,   original.predictor = NA,   ... )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/predict.restrictedROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 class predict for class ","text":"object Result simple_rROC_interpret(), easiest calculated simple_rROC(..., return_proc=TRUE) newdata new dataframe predicted newdata_predictor_column Column name number predictor (use predict response) newdata_response_column Column name number true response (/outcome) pred_high_label Label predictions HIGHER cutoff (Youden-index) pred_low_label Label predictions LOWER EQUAL cutoff (Youden-index) original.response original response loaded object, give original response. original.predictor original predictor loaded object, give predictor ... used keeps devtools::check() happy","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/predict.restrictedROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 class predict for class ","text":"List table_full Table full predictions, classified using Youden-Index. classical way predicting. table_restricted Table restricted predictions, classified using Youden-Index. Samples identified \"unclassifiable\" restriction method removed. pred tibble \"response\": \tTrue response \"predictor\":\tValues use predictors \"keep\": \t\tkept according restriction \"prediction\":\tYouden-based predictions, regardless kept threshold_and_restriction Vector \"restriction\": restriction value, decides together restriction_part samples kept. \"classification_threshold\": Values classified pred_high_label restriction_part \"high\", \"low\" \"global\" (=) samples kept, therefore samples values higher lower () respect restriction kept.","code":"tab_classifiable     Restricted table including the unclassifiable predictions, e.g.                          response         prediction          Poor Good             Poor              29   35             Good               8   34             unclassifiable     4    3"},{"path":"https://ggrlab.github.io/restrictedROC/reference/predict.restrictedROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 class predict for class ","text":"","code":"data(aSAH, package = \"pROC\") tmp <- simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     return_proc = TRUE ) #> Positive label not given, setting to last level of factor: Poor single_rROC <- simple_rROC_interpret(tmp)  predict(     single_rROC,     newdata = aSAH,     newdata_predictor_column = \"ndka\",     newdata_response_column = \"outcome\",     pred_high_label = \"Poor\",     pred_low_label = \"Good\" ) #> $table_full #>          response #> pred_full Poor Good #>      Poor   29   35 #>      Good   12   37 #>  #> $table_restricted #>          response #> pred_kept Poor Good #>      Poor   29   35 #>      Good    8   34 #>  #> $pred #> # A tibble: 113 × 5 #>    response predictor keep  pred_full pred_kept #>    <fct>        <dbl> <lgl> <fct>     <fct>     #>  1 Good          3.01 FALSE Good      Good      #>  2 Good          8.54 TRUE  Good      Good      #>  3 Good          8.09 TRUE  Good      Good      #>  4 Good         10.4  TRUE  Good      Good      #>  5 Poor         17.4  TRUE  Poor      Poor      #>  6 Poor         12.8  TRUE  Poor      Poor      #>  7 Good          6    TRUE  Good      Good      #>  8 Poor         13.2  TRUE  Poor      Poor      #>  9 Good         15.5  TRUE  Poor      Poor      #> 10 Good          6.01 TRUE  Good      Good      #> # ℹ 103 more rows #>  #> $threshold_and_restriction #>   restriction classification_threshold_restricted #> 1       5.685                               11.08 #>   classification_direction_restricted_control_X_case #> 1                                                  < #>   classification_threshold_full classification_direction_full_control_X_case #> 1                         11.08                                            < #>  #> $restriction_part #> [1] \"high\" #>  #> $table_classifiable #>                 response #> pred_kept        Poor Good #>   Poor             29   35 #>   Good              8   34 #>   unclassifiable    4    3 #>   tmp <- simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka ) #> Positive label not given, setting to last level of factor: Poor single_rROC_noFullROC <- simple_rROC_interpret(tmp) if (FALSE) { predict(     single_rROC_noFullROC,     newdata = aSAH,     newdata_predictor_column = \"ndka\",     newdata_response_column = \"outcome\",     pred_high_label = \"Poor\",     pred_low_label = \"Good\" ) } predict(     single_rROC_noFullROC,     newdata = aSAH,     newdata_predictor_column = \"ndka\",     newdata_response_column = \"outcome\",     pred_high_label = \"Poor\",     pred_low_label = \"Good\",     original.response = aSAH$outcome,     original.predictor = aSAH$ndka ) #> $table_full #>          response #> pred_full Poor Good #>      Poor   29   35 #>      Good   12   37 #>  #> $table_restricted #>          response #> pred_kept Poor Good #>      Poor   29   35 #>      Good    8   34 #>  #> $pred #> # A tibble: 113 × 5 #>    response predictor keep  pred_full pred_kept #>    <fct>        <dbl> <lgl> <fct>     <fct>     #>  1 Good          3.01 FALSE Good      Good      #>  2 Good          8.54 TRUE  Good      Good      #>  3 Good          8.09 TRUE  Good      Good      #>  4 Good         10.4  TRUE  Good      Good      #>  5 Poor         17.4  TRUE  Poor      Poor      #>  6 Poor         12.8  TRUE  Poor      Poor      #>  7 Good          6    TRUE  Good      Good      #>  8 Poor         13.2  TRUE  Poor      Poor      #>  9 Good         15.5  TRUE  Poor      Poor      #> 10 Good          6.01 TRUE  Good      Good      #> # ℹ 103 more rows #>  #> $threshold_and_restriction #>   restriction classification_threshold_restricted #> 1       5.685                               11.08 #>   classification_direction_restricted_control_X_case #> 1                                                  < #>   classification_threshold_full classification_direction_full_control_X_case #> 1                         11.08                                            < #>  #> $restriction_part #> [1] \"high\" #>  #> $table_classifiable #>                 response #> pred_kept        Poor Good #>   Poor             29   35 #>   Good              8   34 #>   unclassifiable    4    3 #>"},{"path":"https://ggrlab.github.io/restrictedROC/reference/predict_rROC_h2o.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict new data with a trained model — predict_rROC_h2o","title":"Predict new data with a trained model — predict_rROC_h2o","text":"convenience function predict new data trained model. function wrapper around h2o.predict function. returns list predictions optionally metrics.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/predict_rROC_h2o.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict new data with a trained model — predict_rROC_h2o","text":"","code":"predict_rROC_h2o(   h2o_model,   x_prepared,   y,   init_h2o = FALSE,   calculate_metrics = TRUE,   sample_split = NULL )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/predict_rROC_h2o.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict new data with a trained model — predict_rROC_h2o","text":"h2o_model model use prediction. x_prepared data frame containing preprocessed data use model. data frame can contain variables necessary within h2o_model y true outcome variable. Usually factor. init_h2o Whether initialize h2o. Defaults FALSE expect initialized training already. calculate_metrics Whether calculate metrics. Defaults TRUE. sample_split vector length(y) containing \"split\" data. metrices calculated split separately. Defaults NULL, means whole data used.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/prepare_modeldata.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare model data — prepare_modeldata.data.frame","title":"Prepare model data — prepare_modeldata.data.frame","text":"function prepares data model. takes rROC result applies restrictions data. merges predictions single data.frame can used input model building.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/prepare_modeldata.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare model data — prepare_modeldata.data.frame","text":"","code":"# S3 method for data.frame prepare_modeldata(   x,   y = NULL,   rroc_result = NULL,   rroc_savefile = NULL,   which_preds = \"bounded\",   removed_impute = -1,   ... )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/prepare_modeldata.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare model data — prepare_modeldata.data.frame","text":"x Data prepared. Can data.frame matrix, must column names. Rows samples, columns features. y outcome vector. NULL, rroc_result must supplied. given, rROC() uses . rroc_result result rROC(). NULL, rROC() called x, y .... rroc_savefile NULL, rroc_result saved file. which_preds predictions returned? Default \"bounded\". See merge_applied details. removed_impute value impute samples outside informative range. ... Arguments passed rROC() rroc_result NULL.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/prepare_modeldata.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare model data — prepare_modeldata","title":"Prepare model data — prepare_modeldata","text":"function prepares data model. takes rROC result applies restrictions data. merges predictions single data.frame can used input model building.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/prepare_modeldata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare model data — prepare_modeldata","text":"","code":"prepare_modeldata(x, ...)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/prepare_modeldata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare model data — prepare_modeldata","text":"x Data prepared. Can data.frame matrix, must column names. Rows samples, columns features. ... Arguments passed prepare_modeldata.data.frame y outcome vector. NULL, rroc_result must supplied. given, rROC() uses . rroc_result result rROC(). NULL, rROC() called x, y .... rroc_savefile NULL, rroc_result saved file. which_preds predictions returned? Default \"bounded\". See merge_applied details. removed_impute value impute samples outside informative range.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Restriction for multiple dependent and independent variables — rROC.data.frame","title":"Restriction for multiple dependent and independent variables — rROC.data.frame","text":"Restriction multiple dependent independent variables. Traverses dependent variables within independent variables. calculates rROC sense dependent ~ independent. Can save intermediate results disk, avoid re-calculating crash-reasons save time re-running analysis. Can return plot_density_rROC_empirical every combination.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restriction for multiple dependent and independent variables — rROC.data.frame","text":"","code":"# S3 method for data.frame rROC(   x,   independent_vars,   dependent_vars = NULL,   y = NULL,   save_path = NULL,   parallel_permutations = TRUE,   n_permutations = 10000,   save_intermediate = TRUE,   load_existing_intermediate = TRUE,   positive_label = 1,   verbose = TRUE,   do_plots = FALSE,   fix_seed = 0,   ... )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restriction for multiple dependent and independent variables — rROC.data.frame","text":"x data.frame containing dependent independent variables columns. independent_vars character vector independent variable column names. NULL, columns except dependent_vars used. dependent_vars character vector dependent variable column names. NULL, y must given. y Either vector dependent variable values list length 1 vector dependent variable values. NULL, dependent_vars must given. save_path Path save results . Intermediate results saved directory file.path(save_path, \"_partial_directory\"). parallel_permutations boolean: TRUE, permutation done via future.apply::future_lapply, otherwise base::lapply n_permutations many permutations done save_intermediate intermediate results saved disk? TRUE, every combination saved file.path(save_path, \"_partial_directory\"). load_existing_intermediate earlier saved intermediate results folder file.path(save_path, \"_partial_directory\") loaded? positive_label Label positive class. values response regarded negative cases. verbose progress printed? do_plots plot_density_rROC_empirical calculated returned? fix_seed boolean: FALSE, seed permutation set set.seed(fix_seed + permutation_i) ... Arguments passed simple_rROC_permutation return_proc pROC::roc() returned full dataset? 2) pROC::roc() returned part datasets? works get_all_aucs_fun=get_all_aucs  get_all_aucs_norecalculation() calculate ROC curves restriction separately.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restriction for multiple dependent and independent variables — rROC.data.frame","text":"list lists simple_rROC_permutation plot results. structured follows: dependent variable: independent variable: \"plots\": plot_density_rROC_empirical result \"permutation\": simple_rROC_permutation result","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.html","id":null,"dir":"Reference","previous_headings":"","what":"Restriction for multiple dependent and independent variables — rROC","title":"Restriction for multiple dependent and independent variables — rROC","text":"Restriction multiple dependent independent variables","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restriction for multiple dependent and independent variables — rROC","text":"","code":"rROC(x, ...)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restriction for multiple dependent and independent variables — rROC","text":"x data.frame:  See rROC.data.frame. data.frame containing dependent independent variables columns. Dependent/independent variable column names must given \"dependent_vars\"/\"independent_vars\" arguments. matrix:  See rROC.matrix. Matrix (samples x features). Dependent variable(s) must given \"y\" argument. numeric vector:  See rROC.numeric. Numeric vector independent variable. Dependent variable(s) must given \"y\" argument. ... Arguments passed rROC.data.frame, simple_rROC_permutation y Either vector dependent variable values list length 1 vector dependent variable values. NULL, dependent_vars must given. save_path Path save results . Intermediate results saved directory file.path(save_path, \"_partial_directory\"). save_intermediate intermediate results saved disk? TRUE, every combination saved file.path(save_path, \"_partial_directory\"). load_existing_intermediate earlier saved intermediate results folder file.path(save_path, \"_partial_directory\") loaded? do_plots plot_density_rROC_empirical calculated returned? verbose progress printed? n_permutations many permutations done fix_seed boolean: FALSE, seed permutation set set.seed(fix_seed + permutation_i) parallel_permutations boolean: TRUE, permutation done via future.apply::future_lapply, otherwise base::lapply positive_label Label positive class. values response regarded negative cases. return_proc pROC::roc() returned full dataset? 2) pROC::roc() returned part datasets? works get_all_aucs_fun=get_all_aucs  get_all_aucs_norecalculation() calculate ROC curves restriction separately.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restriction for multiple dependent and independent variables — rROC","text":"list lists simple_rROC_permutation plot results. structured follows: dependent variable: independent variable: \"plots\": plot_density_rROC_empirical result \"permutation\": simple_rROC_permutation result","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"rROC on a matrix of (samples x features) — rROC.matrix","title":"rROC on a matrix of (samples x features) — rROC.matrix","text":"rROC matrix (samples x features)","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rROC on a matrix of (samples x features) — rROC.matrix","text":"","code":"# S3 method for matrix rROC(x, y, ...)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rROC on a matrix of (samples x features) — rROC.matrix","text":"x Matrix, rows samples, columns features. Every feature restricted. y Factor vector, values dependent variable every column (element/sample). ... Arguments passed rROC.data.frame save_path Path save results . Intermediate results saved directory file.path(save_path, \"_partial_directory\"). save_intermediate intermediate results saved disk? TRUE, every combination saved file.path(save_path, \"_partial_directory\"). load_existing_intermediate earlier saved intermediate results folder file.path(save_path, \"_partial_directory\") loaded? do_plots plot_density_rROC_empirical calculated returned? verbose progress printed? n_permutations many permutations done fix_seed boolean: FALSE, seed permutation set set.seed(fix_seed + permutation_i) parallel_permutations boolean: TRUE, permutation done via future.apply::future_lapply, otherwise base::lapply positive_label Label positive class. values response regarded negative cases.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rROC on a matrix of (samples x features) — rROC.matrix","text":"list lists simple_rROC_permutation plot results. structured follows: dependent variable: independent variable: \"plots\": plot_density_rROC_empirical result \"permutation\": simple_rROC_permutation result","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"rROC on a single numeric vector — rROC.numeric","title":"rROC on a single numeric vector — rROC.numeric","text":"rROC single numeric vector","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rROC on a single numeric vector — rROC.numeric","text":"","code":"# S3 method for numeric rROC(x, y, ...)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rROC on a single numeric vector — rROC.numeric","text":"x Numeric vector, values independent variable every element/sample. y Factor vector, values dependent variable every element/sample. ... Arguments passed rROC.data.frame save_path Path save results . Intermediate results saved directory file.path(save_path, \"_partial_directory\"). save_intermediate intermediate results saved disk? TRUE, every combination saved file.path(save_path, \"_partial_directory\"). load_existing_intermediate earlier saved intermediate results folder file.path(save_path, \"_partial_directory\") loaded? do_plots plot_density_rROC_empirical calculated returned? verbose progress printed? n_permutations many permutations done fix_seed boolean: FALSE, seed permutation set set.seed(fix_seed + permutation_i) parallel_permutations boolean: TRUE, permutation done via future.apply::future_lapply, otherwise base::lapply positive_label Label positive class. values response regarded negative cases.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/rROC.numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rROC on a single numeric vector — rROC.numeric","text":"list lists simple_rROC_permutation plot results. structured follows: dependent variable: independent variable: \"plots\": plot_density_rROC_empirical result \"permutation\": simple_rROC_permutation result","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/restrictedROC-package.html","id":null,"dir":"Reference","previous_headings":"","what":"restrictedROC: Calculate restricted ROC curves — restrictedROC-package","title":"restrictedROC: Calculate restricted ROC curves — restrictedROC-package","text":"Calculate restricted ROC-curves, AUCs permutation p-values.","code":""},{"path":[]},{"path":"https://ggrlab.github.io/restrictedROC/reference/restrictedROC-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"restrictedROC: Calculate restricted ROC curves — restrictedROC-package","text":"Maintainer: Gunther Glehr gunthergl@gmx.net (ORCID)","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate values from distributions — sim","title":"Simulate values from distributions — sim","text":"Simulate values distributions","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate values from distributions — sim","text":"","code":"sim(..., length.out = 100, do_melt = TRUE)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate values from distributions — sim","text":"... Every argument must function takes number values generated, e.g.:   length.many samples drawn population do_melt TRUE: # tibble: 200 × 2 Distribution  Value  1 negative      0.805 2 positive      2.62 3 negative      1.19 4 positive      1.49 FALSE: # tibble: 100 × 2 negative positive  1   0.631     2.81 2   0.687     1.87 3   0.0347    1.61 4  -1.15      0.529","code":"`function(n) random_n_values_from_distribution(n)`"},{"path":"https://ggrlab.github.io/restrictedROC/reference/sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate values from distributions — sim","text":"","code":"See do_melt parameter"},{"path":"https://ggrlab.github.io/restrictedROC/reference/sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate values from distributions — sim","text":"","code":"sim(     negative = function(x) rnorm(x, mean = 0, sd = 1),     positive = function(x) rnorm(x, mean = 1, sd = 1) ) #> # A tibble: 200 × 2 #>     Value Distribution #>     <dbl> <chr>        #>  1  0.386 negative     #>  2 -0.839 negative     #>  3 -0.530 negative     #>  4 -2.29  negative     #>  5  1.86  negative     #>  6 -0.625 negative     #>  7  0.176 negative     #>  8 -1.37  negative     #>  9 -1.35  negative     #> 10  0.947 negative     #> # ℹ 190 more rows sim(     list(         negative = function(x) rnorm(x, mean = 0, sd = 1),         positive = function(x) rnorm(x, mean = 1, sd = 1)     ) ) #> # A tibble: 200 × 2 #>      Value Distribution #>      <dbl> <chr>        #>  1  1.07   negative     #>  2  0.655  negative     #>  3 -0.123  negative     #>  4 -0.930  negative     #>  5  1.52   negative     #>  6 -0.0768 negative     #>  7 -0.370  negative     #>  8  0.606  negative     #>  9  1.53   negative     #> 10 -0.0815 negative     #> # ℹ 190 more rows sim(     negative = function(x) rnorm(x, mean = 0, sd = 1),     positive = function(x) rnorm(x, mean = 1, sd = 1),     do_melt = FALSE ) #> # A tibble: 100 × 2 #>    negative positive #>       <dbl>    <dbl> #>  1   0.605    2.12   #>  2   0.801    1.40   #>  3   0.318    0.0155 #>  4   0.103    0.497  #>  5  -0.658    1.99   #>  6   0.0339   3.19   #>  7  -0.650    0.835  #>  8   0.911    0.314  #>  9  -0.0473   1.94   #> 10  -1.18     0.836  #> # ℹ 90 more rows sim(     negative = function(x) rnorm(x, mean = 0, sd = 1),     positive = function(x) rnorm(x, mean = 1, sd = 1),     do_melt = TRUE ) #> # A tibble: 200 × 2 #>       Value Distribution #>       <dbl> <chr>        #>  1 -1.39    negative     #>  2  0.437   negative     #>  3  0.316   negative     #>  4  0.195   negative     #>  5 -0.456   negative     #>  6  0.813   negative     #>  7  0.275   negative     #>  8  0.00601 negative     #>  9  2.01    negative     #> 10  0.314   negative     #> # ℹ 190 more rows  sim(     negative = function(x) rnorm(x, mean = 0, sd = 1),     positive = function(x) rnorm(x, mean = 1, sd = 1),     length.out = 10 ) #> # A tibble: 20 × 2 #>      Value Distribution #>      <dbl> <chr>        #>  1  0.0491 negative     #>  2 -0.0328 negative     #>  3 -0.511  negative     #>  4  0.356  negative     #>  5  0.418  negative     #>  6  0.579  negative     #>  7 -1.48   negative     #>  8  1.32   negative     #>  9  1.03   negative     #> 10  0.317  negative     #> 11 -0.112  positive     #> 12  1.62   positive     #> 13  2.81   positive     #> 14  2.11   positive     #> 15  1.47   positive     #> 16 -0.0686 positive     #> 17  1.26   positive     #> 18  0.223  positive     #> 19  0.0497 positive     #> 20  2.23   positive"},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC.html","id":null,"dir":"Reference","previous_headings":"","what":"restricted ROC — simple_rROC","title":"restricted ROC — simple_rROC","text":"Calculate restricted ROC curves.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"restricted ROC — simple_rROC","text":"","code":"simple_rROC(   response,   predictor,   direction = \"<\",   positive_label = NULL,   get_all_aucs_fun = get_all_aucs_norecalculation,   return_proc = FALSE,   do_parallel = FALSE,   check_positive_negative_count = FALSE )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"restricted ROC — simple_rROC","text":"response vector containing true class labels. Care important class positive class predictions ordered according restriction predictor vector containing predictions. direction See pROC::roc(), \"<\" implemented right now. Maybe changing positive_label already solves problem. positive_label Label positive class. values response regarded negative cases. get_all_aucs_fun calculate AUCs. usually now want set . Implemented get_all_aucs(): Calculates AUCs actively splitting data markerHIGH markerLOW parts. calculates usual AUC parts.   return_proc pROC::roc() returned full dataset? 2) pROC::roc() returned part datasets? works get_all_aucs_fun=get_all_aucs  get_all_aucs_norecalculation() calculate ROC curves restriction separately. do_parallel get_all_aucs() parallelization enabled, reason seemed improve speed calculation. Therefore throws error. get_all_aucs_norecalculation() use . check_positive_negative_count Pure checking/testing parameter, set TRUE anytime. Just enables checks number positives/negatives extracted correctly restrictions","code":"`get_all_aucs_norecalculation()`:         Calculates the AUCs based on the scaling factor described in the         publication. Much faster after the ROC curve does not have to         be recalculated over and over again.         Todo: Could potentially be improved by not recalculating the partial         AUCs with pROC over and over but by just adding parts."},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"restricted ROC — simple_rROC","text":"List two elements:","code":"\"positive_label\": Label of the positive class \"joined_aucs\": Table with the following columns:  threshold      The threshold which was used as restriction value.      \"high\"-part is always >= threshold      \"low\"-part is always   < threshold  auc_high      restricted AUC for the high part, including the scaling factor  positives_high      How many positives are in the restricted range of high values  negatives_high      How many negatives are in the restricted range of high values  scaling_high      Scaling factor which is multiplied with the actual partial      area under the curve to obtain the \"recalculated\" area under      the curve if it was RE-calculated on the samples being in the      restricted range of high values  auc_var_H0_high      Estimated variance under the nullhypothesis using      \\deqn{\\frac{n_{positives} + n_{negatives} + 1}{12\\cdot n_{positives} \\cdot n_{negatives}}}  rzAUC_high      restricted standardized AUC, obtained via      \\deqn{\\frac{auc_high - .5}{\\sqrt{auc_var_H0_high}}}  pval_asym_onesided_high      Asymptotic, onesided (is AUC bigger) p-value of the restricted standardized AUC,      obtained via:      \\deqn{1 - pnorm(full_df[[\"rzAUC\"]])}      Here the requirements are not fullfilled, use with utmost caution!  pval_asym_high      Asymptotic, twosided (is AUC different) p-value of the restricted standardized AUC,      obtained via:      \\deqn{(1 - pnorm(abs(full_df[[\"rzAUC\"]]))) * 2}      Here the requirements are not fullfilled, use with utmost caution!  auc_low      restricted AUC for the low part, including the scaling factor  positives_low      How many positives are in the restricted range of low values  negatives_low      How many negatives are in the restricted range of low values  scaling_low      Scaling factor which is multiplied with the actual partial      area under the curve to obtain the \"recalculated\" area under      the curve if it was RE-calculated on the samples being in the      restricted range of low values  auc_var_H0_low      Estimated variance under the nullhypothesis using      \\deqn{\\frac{n_{positives} + n_{negatives} + 1}{12\\cdot n_{positives} \\cdot n_{negatives}}}  rzAUC_low      restricted standardized AUC, obtained via      \\deqn{\\frac{auc_low - .5}{\\sqrt{auc_var_H0_low}}}  pval_asym_onesided_low      Asymptotic, onesided (is AUC bigger) p-value of the restricted standardized AUC,      obtained via:      \\deqn{1 - pnorm(full_df[[\"rzAUC\"]])}      Here the requirements are not fullfilled, use with utmost caution!  pval_asym_low      Asymptotic, twosided (is AUC different) p-value of the restricted standardized AUC,      obtained via:      \\deqn{(1 - pnorm(abs(full_df[[\"rzAUC\"]]))) * 2}      Here the requirements are not fullfilled, use with utmost caution!  tp      Number of true positives at that threshold including all samples  fp      Number of false positives at that threshold including all samples  tpr_global      True positive rate at that threshold including all (\"global\") samples  fpr_global      False positive rate at that threshold including all (\"global\") samples"},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"restricted ROC — simple_rROC","text":"","code":"data(aSAH, package = \"pROC\") simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka ) #> Positive label not given, setting to last level of factor: Poor #> $joined_aucs #> # A tibble: 110 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.612             41             72         1            0.00322 #>  2      3.44    0.606             41             71         1.01         0.00323 #>  3      4.24    0.622             40             71         1.04         0.00329 #>  4      4.82    0.616             40             70         1.05         0.00330 #>  5      5.11    0.611             40             69         1.07         0.00332 #>  6      5.18    0.626             39             69         1.10         0.00338 #>  7      5.28    0.643             38             69         1.13         0.00343 #>  8      5.68    0.660             37             69         1.16         0.00349 #>  9      6.00    0.655             37             68         1.17         0.00351 #> 10      6.15    0.650             37             67         1.19         0.00353 #> # ℹ 100 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $positive_label #> [1] \"Poor\" #>  #> attr(,\"class\") #> [1] \"simple_rROC\" \"list\"        simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     positive_label = \"Poor\" ) #> $joined_aucs #> # A tibble: 110 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.612             41             72         1            0.00322 #>  2      3.44    0.606             41             71         1.01         0.00323 #>  3      4.24    0.622             40             71         1.04         0.00329 #>  4      4.82    0.616             40             70         1.05         0.00330 #>  5      5.11    0.611             40             69         1.07         0.00332 #>  6      5.18    0.626             39             69         1.10         0.00338 #>  7      5.28    0.643             38             69         1.13         0.00343 #>  8      5.68    0.660             37             69         1.16         0.00349 #>  9      6.00    0.655             37             68         1.17         0.00351 #> 10      6.15    0.650             37             67         1.19         0.00353 #> # ℹ 100 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $positive_label #> [1] \"Poor\" #>  #> attr(,\"class\") #> [1] \"simple_rROC\" \"list\"        simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     positive_label = \"Good\" ) #> $joined_aucs #> # A tibble: 110 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.388             72             41         1            0.00322 #>  2      3.44    0.394             71             41         1.01         0.00323 #>  3      4.24    0.378             71             40         1.04         0.00329 #>  4      4.82    0.384             70             40         1.05         0.00330 #>  5      5.11    0.389             69             40         1.07         0.00332 #>  6      5.18    0.374             69             39         1.10         0.00338 #>  7      5.28    0.357             69             38         1.13         0.00343 #>  8      5.68    0.340             69             37         1.16         0.00349 #>  9      6.00    0.345             68             37         1.17         0.00351 #> 10      6.15    0.350             67             37         1.19         0.00353 #> # ℹ 100 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $positive_label #> [1] \"Good\" #>  #> attr(,\"class\") #> [1] \"simple_rROC\" \"list\"        simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     get_all_aucs_fun = restrictedROC:::get_all_aucs_norecalculation ) #> Positive label not given, setting to last level of factor: Poor #> $joined_aucs #> # A tibble: 110 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.612             41             72         1            0.00322 #>  2      3.44    0.606             41             71         1.01         0.00323 #>  3      4.24    0.622             40             71         1.04         0.00329 #>  4      4.82    0.616             40             70         1.05         0.00330 #>  5      5.11    0.611             40             69         1.07         0.00332 #>  6      5.18    0.626             39             69         1.10         0.00338 #>  7      5.28    0.643             38             69         1.13         0.00343 #>  8      5.68    0.660             37             69         1.16         0.00349 #>  9      6.00    0.655             37             68         1.17         0.00351 #> 10      6.15    0.650             37             67         1.19         0.00353 #> # ℹ 100 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $positive_label #> [1] \"Poor\" #>  #> attr(,\"class\") #> [1] \"simple_rROC\" \"list\"        simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     get_all_aucs_fun = restrictedROC:::get_all_aucs ) #> Positive label not given, setting to last level of factor: Poor #> $joined_aucs #> # A tibble: 110 × 19 #>    threshold auc_high positives_high negatives_high auc_var_H0_high rzAUC_high #>        <dbl>    <dbl>          <int>          <int>           <dbl>      <dbl> #>  1   -Inf       0.612             41             72         0.00322       1.97 #>  2      3.44    0.606             41             71         0.00323       1.87 #>  3      4.24    0.622             40             71         0.00329       2.12 #>  4      4.82    0.616             40             70         0.00330       2.02 #>  5      5.11    0.611             40             69         0.00332       1.92 #>  6      5.18    0.626             39             69         0.00338       2.17 #>  7      5.28    0.643             38             69         0.00343       2.44 #>  8      5.68    0.660             37             69         0.00349       2.71 #>  9      6.00    0.655             37             68         0.00351       2.62 #> 10      6.15    0.650             37             67         0.00353       2.53 #> # ℹ 100 more rows #> # ℹ 13 more variables: pval_asym_onesided_high <dbl>, pval_asym_high <dbl>, #> #   auc_low <dbl>, positives_low <int>, negatives_low <int>, #> #   auc_var_H0_low <dbl>, rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, #> #   pval_asym_low <dbl>, tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $positive_label #> [1] \"Poor\" #>  #> attr(,\"class\") #> [1] \"simple_rROC\" \"list\"        simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     get_all_aucs_fun = restrictedROC:::get_all_aucs,     return_proc = TRUE ) #> Positive label not given, setting to last level of factor: Poor #> $joined_aucs #> # A tibble: 110 × 19 #>    threshold auc_high positives_high negatives_high auc_var_H0_high rzAUC_high #>        <dbl>    <dbl>          <int>          <int>           <dbl>      <dbl> #>  1   -Inf       0.612             41             72         0.00322       1.97 #>  2      3.44    0.606             41             71         0.00323       1.87 #>  3      4.24    0.622             40             71         0.00329       2.12 #>  4      4.82    0.616             40             70         0.00330       2.02 #>  5      5.11    0.611             40             69         0.00332       1.92 #>  6      5.18    0.626             39             69         0.00338       2.17 #>  7      5.28    0.643             38             69         0.00343       2.44 #>  8      5.68    0.660             37             69         0.00349       2.71 #>  9      6.00    0.655             37             68         0.00351       2.62 #> 10      6.15    0.650             37             67         0.00353       2.53 #> # ℹ 100 more rows #> # ℹ 13 more variables: pval_asym_onesided_high <dbl>, pval_asym_high <dbl>, #> #   auc_low <dbl>, positives_low <int>, negatives_low <int>, #> #   auc_var_H0_low <dbl>, rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, #> #   pval_asym_low <dbl>, tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $positive_label #> [1] \"Poor\" #>  #> $pROC_lowpart #> $pROC_lowpart$`-Inf` #> NULL #>  #> $pROC_lowpart$`3.44` #> NULL #>  #> $pROC_lowpart$`4.24` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 1 controls (part_df[[\"true\"]] FALSE) < 1 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 1 #>  #> $pROC_lowpart$`4.82` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 2 controls (part_df[[\"true\"]] FALSE) < 1 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5 #>  #> $pROC_lowpart$`5.105` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 3 controls (part_df[[\"true\"]] FALSE) < 1 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.3333 #>  #> $pROC_lowpart$`5.185` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 3 controls (part_df[[\"true\"]] FALSE) < 2 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6667 #>  #> $pROC_lowpart$`5.28` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 3 controls (part_df[[\"true\"]] FALSE) < 3 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.7778 #>  #> $pROC_lowpart$`5.685` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 3 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.8333 #>  #> $pROC_lowpart$`6.005` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 4 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.625 #>  #> $pROC_lowpart$`6.15` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 5 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5 #>  #> $pROC_lowpart$`6.295` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 6 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4167 #>  #> $pROC_lowpart$`6.345` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 7 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.3571 #>  #> $pROC_lowpart$`6.465` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 8 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.3125 #>  #> $pROC_lowpart$`6.565` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 9 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.2778 #>  #> $pROC_lowpart$`6.69` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 10 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.25 #>  #> $pROC_lowpart$`6.925` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 11 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.2273 #>  #> $pROC_lowpart$`7.24` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 12 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.2083 #>  #> $pROC_lowpart$`7.525` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 12 controls (part_df[[\"true\"]] FALSE) < 5 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.3667 #>  #> $pROC_lowpart$`7.645` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 13 controls (part_df[[\"true\"]] FALSE) < 5 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.3385 #>  #> $pROC_lowpart$`7.705` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 14 controls (part_df[[\"true\"]] FALSE) < 5 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.3143 #>  #> $pROC_lowpart$`7.855` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 15 controls (part_df[[\"true\"]] FALSE) < 5 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.2933 #>  #> $pROC_lowpart$`7.99` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 16 controls (part_df[[\"true\"]] FALSE) < 5 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.275 #>  #> $pROC_lowpart$`8.055` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 17 controls (part_df[[\"true\"]] FALSE) < 5 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.2588 #>  #> $pROC_lowpart$`8.16` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 18 controls (part_df[[\"true\"]] FALSE) < 5 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.2444 #>  #> $pROC_lowpart$`8.305` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 18 controls (part_df[[\"true\"]] FALSE) < 6 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.3704 #>  #> $pROC_lowpart$`8.455` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 18 controls (part_df[[\"true\"]] FALSE) < 7 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4603 #>  #> $pROC_lowpart$`8.535` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 19 controls (part_df[[\"true\"]] FALSE) < 7 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4361 #>  #> $pROC_lowpart$`8.72` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 20 controls (part_df[[\"true\"]] FALSE) < 7 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4143 #>  #> $pROC_lowpart$`8.955` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 20 controls (part_df[[\"true\"]] FALSE) < 8 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4875 #>  #> $pROC_lowpart$`9.225` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 21 controls (part_df[[\"true\"]] FALSE) < 8 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4643 #>  #> $pROC_lowpart$`9.455` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 23 controls (part_df[[\"true\"]] FALSE) < 8 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4239 #>  #> $pROC_lowpart$`9.52` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 24 controls (part_df[[\"true\"]] FALSE) < 8 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4062 #>  #> $pROC_lowpart$`9.6` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 24 controls (part_df[[\"true\"]] FALSE) < 9 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4722 #>  #> $pROC_lowpart$`9.665` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 25 controls (part_df[[\"true\"]] FALSE) < 10 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.506 #>  #> $pROC_lowpart$`9.75` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 26 controls (part_df[[\"true\"]] FALSE) < 10 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4865 #>  #> $pROC_lowpart$`9.805` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 27 controls (part_df[[\"true\"]] FALSE) < 10 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4685 #>  #> $pROC_lowpart$`9.82` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 28 controls (part_df[[\"true\"]] FALSE) < 10 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4518 #>  #> $pROC_lowpart$`9.84` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 29 controls (part_df[[\"true\"]] FALSE) < 10 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4362 #>  #> $pROC_lowpart$`9.9` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 29 controls (part_df[[\"true\"]] FALSE) < 11 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4875 #>  #> $pROC_lowpart$`10.14` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 30 controls (part_df[[\"true\"]] FALSE) < 11 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4712 #>  #> $pROC_lowpart$`10.365` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 31 controls (part_df[[\"true\"]] FALSE) < 11 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.456 #>  #> $pROC_lowpart$`10.41` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 31 controls (part_df[[\"true\"]] FALSE) < 12 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5013 #>  #> $pROC_lowpart$`10.465` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 32 controls (part_df[[\"true\"]] FALSE) < 12 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4857 #>  #> $pROC_lowpart$`10.53` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 33 controls (part_df[[\"true\"]] FALSE) < 12 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.471 #>  #> $pROC_lowpart$`10.575` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 34 controls (part_df[[\"true\"]] FALSE) < 12 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4571 #>  #> $pROC_lowpart$`10.715` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 35 controls (part_df[[\"true\"]] FALSE) < 12 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.444 #>  #> $pROC_lowpart$`10.95` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 36 controls (part_df[[\"true\"]] FALSE) < 12 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4317 #>  #> $pROC_lowpart$`11.08` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 37 controls (part_df[[\"true\"]] FALSE) < 12 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.42 #>  #> $pROC_lowpart$`11.345` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 37 controls (part_df[[\"true\"]] FALSE) < 13 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4647 #>  #> $pROC_lowpart$`11.635` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 37 controls (part_df[[\"true\"]] FALSE) < 14 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5029 #>  #> $pROC_lowpart$`11.675` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 37 controls (part_df[[\"true\"]] FALSE) < 15 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.536 #>  #> $pROC_lowpart$`11.7` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 38 controls (part_df[[\"true\"]] FALSE) < 15 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5219 #>  #> $pROC_lowpart$`11.725` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 38 controls (part_df[[\"true\"]] FALSE) < 16 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5518 #>  #> $pROC_lowpart$`11.85` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 39 controls (part_df[[\"true\"]] FALSE) < 16 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5377 #>  #> $pROC_lowpart$`12.095` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 40 controls (part_df[[\"true\"]] FALSE) < 16 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5242 #>  #> $pROC_lowpart$`12.375` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 40 controls (part_df[[\"true\"]] FALSE) < 17 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5522 #>  #> $pROC_lowpart$`12.55` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 41 controls (part_df[[\"true\"]] FALSE) < 17 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5387 #>  #> $pROC_lowpart$`12.58` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 42 controls (part_df[[\"true\"]] FALSE) < 17 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5259 #>  #> $pROC_lowpart$`12.63` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 43 controls (part_df[[\"true\"]] FALSE) < 17 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5137 #>  #> $pROC_lowpart$`12.69` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 44 controls (part_df[[\"true\"]] FALSE) < 17 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.502 #>  #> $pROC_lowpart$`12.73` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 45 controls (part_df[[\"true\"]] FALSE) < 17 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4908 #>  #> $pROC_lowpart$`12.775` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 45 controls (part_df[[\"true\"]] FALSE) < 18 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5191 #>  #> $pROC_lowpart$`12.85` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 46 controls (part_df[[\"true\"]] FALSE) < 18 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5079 #>  #> $pROC_lowpart$`12.94` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 47 controls (part_df[[\"true\"]] FALSE) < 19 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.523 #>  #> $pROC_lowpart$`13.05` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 48 controls (part_df[[\"true\"]] FALSE) < 19 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5121 #>  #> $pROC_lowpart$`13.16` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 49 controls (part_df[[\"true\"]] FALSE) < 19 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5016 #>  #> $pROC_lowpart$`13.305` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 49 controls (part_df[[\"true\"]] FALSE) < 20 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5265 #>  #> $pROC_lowpart$`13.43` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 50 controls (part_df[[\"true\"]] FALSE) < 20 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.516 #>  #> $pROC_lowpart$`13.505` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 51 controls (part_df[[\"true\"]] FALSE) < 20 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5059 #>  #> $pROC_lowpart$`13.615` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 51 controls (part_df[[\"true\"]] FALSE) < 21 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5294 #>  #> $pROC_lowpart$`13.77` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 51 controls (part_df[[\"true\"]] FALSE) < 22 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5508 #>  #> $pROC_lowpart$`13.955` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 52 controls (part_df[[\"true\"]] FALSE) < 22 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5402 #>  #> $pROC_lowpart$`14.15` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 52 controls (part_df[[\"true\"]] FALSE) < 23 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5602 #>  #> $pROC_lowpart$`14.3` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 52 controls (part_df[[\"true\"]] FALSE) < 24 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5785 #>  #> $pROC_lowpart$`14.455` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 53 controls (part_df[[\"true\"]] FALSE) < 24 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5676 #>  #> $pROC_lowpart$`15.055` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 54 controls (part_df[[\"true\"]] FALSE) < 24 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5571 #>  #> $pROC_lowpart$`15.715` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 55 controls (part_df[[\"true\"]] FALSE) < 25 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5647 #>  #> $pROC_lowpart$`15.925` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 55 controls (part_df[[\"true\"]] FALSE) < 26 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5815 #>  #> $pROC_lowpart$`16.035` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 55 controls (part_df[[\"true\"]] FALSE) < 27 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.597 #>  #> $pROC_lowpart$`16.66` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 56 controls (part_df[[\"true\"]] FALSE) < 27 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5863 #>  #> $pROC_lowpart$`17.255` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 57 controls (part_df[[\"true\"]] FALSE) < 27 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.576 #>  #> $pROC_lowpart$`17.35` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 58 controls (part_df[[\"true\"]] FALSE) < 27 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5661 #>  #> $pROC_lowpart$`17.63` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 58 controls (part_df[[\"true\"]] FALSE) < 28 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5816 #>  #> $pROC_lowpart$`18.035` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 59 controls (part_df[[\"true\"]] FALSE) < 28 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5717 #>  #> $pROC_lowpart$`18.835` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 60 controls (part_df[[\"true\"]] FALSE) < 28 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5622 #>  #> $pROC_lowpart$`20.105` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 61 controls (part_df[[\"true\"]] FALSE) < 28 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.553 #>  #> $pROC_lowpart$`20.985` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 62 controls (part_df[[\"true\"]] FALSE) < 28 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5441 #>  #> $pROC_lowpart$`21.35` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 62 controls (part_df[[\"true\"]] FALSE) < 29 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5598 #>  #> $pROC_lowpart$`21.525` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 62 controls (part_df[[\"true\"]] FALSE) < 30 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5745 #>  #> $pROC_lowpart$`21.75` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 62 controls (part_df[[\"true\"]] FALSE) < 31 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5882 #>  #> $pROC_lowpart$`22.1` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 62 controls (part_df[[\"true\"]] FALSE) < 32 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6011 #>  #> $pROC_lowpart$`22.35` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 63 controls (part_df[[\"true\"]] FALSE) < 32 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5915 #>  #> $pROC_lowpart$`22.53` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 64 controls (part_df[[\"true\"]] FALSE) < 32 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5823 #>  #> $pROC_lowpart$`23.605` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 64 controls (part_df[[\"true\"]] FALSE) < 33 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5949 #>  #> $pROC_lowpart$`25.885` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 65 controls (part_df[[\"true\"]] FALSE) < 33 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5858 #>  #> $pROC_lowpart$`27.84` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 66 controls (part_df[[\"true\"]] FALSE) < 33 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5769 #>  #> $pROC_lowpart$`30.43` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 67 controls (part_df[[\"true\"]] FALSE) < 33 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5683 #>  #> $pROC_lowpart$`32.39` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 67 controls (part_df[[\"true\"]] FALSE) < 34 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.581 #>  #> $pROC_lowpart$`33.235` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 67 controls (part_df[[\"true\"]] FALSE) < 35 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.593 #>  #> $pROC_lowpart$`37.2` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 67 controls (part_df[[\"true\"]] FALSE) < 36 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6043 #>  #> $pROC_lowpart$`40.885` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 67 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.615 #>  #> $pROC_lowpart$`44.13` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 68 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6059 #>  #> $pROC_lowpart$`47.22` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 69 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5971 #>  #> $pROC_lowpart$`48.775` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 69 controls (part_df[[\"true\"]] FALSE) < 38 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6077 #>  #> $pROC_lowpart$`52.38` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 70 controls (part_df[[\"true\"]] FALSE) < 38 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5991 #>  #> $pROC_lowpart$`56.825` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 70 controls (part_df[[\"true\"]] FALSE) < 39 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6093 #>  #> $pROC_lowpart$`65.7` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 71 controls (part_df[[\"true\"]] FALSE) < 39 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6008 #>  #> $pROC_lowpart$`76.435` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 71 controls (part_df[[\"true\"]] FALSE) < 40 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6107 #>  #> $pROC_lowpart$`249.745` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 72 controls (part_df[[\"true\"]] FALSE) < 40 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6023 #>  #> $pROC_lowpart$`Inf` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 72 controls (part_df[[\"true\"]] FALSE) < 41 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.612 #>  #>  #> $pROC_highpart #> $pROC_highpart$`-Inf` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 72 controls (part_df[[\"true\"]] FALSE) < 41 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.612 #>  #> $pROC_highpart$`3.44` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 71 controls (part_df[[\"true\"]] FALSE) < 41 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6065 #>  #> $pROC_highpart$`4.24` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 71 controls (part_df[[\"true\"]] FALSE) < 40 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6217 #>  #> $pROC_highpart$`4.82` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 70 controls (part_df[[\"true\"]] FALSE) < 40 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6162 #>  #> $pROC_highpart$`5.105` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 69 controls (part_df[[\"true\"]] FALSE) < 40 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6107 #>  #> $pROC_highpart$`5.185` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 69 controls (part_df[[\"true\"]] FALSE) < 39 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6263 #>  #> $pROC_highpart$`5.28` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 69 controls (part_df[[\"true\"]] FALSE) < 38 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6428 #>  #> $pROC_highpart$`5.685` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 69 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6602 #>  #> $pROC_highpart$`6.005` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 68 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6552 #>  #> $pROC_highpart$`6.15` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 67 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6501 #>  #> $pROC_highpart$`6.295` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 66 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6448 #>  #> $pROC_highpart$`6.345` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 65 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6393 #>  #> $pROC_highpart$`6.465` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 64 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6337 #>  #> $pROC_highpart$`6.565` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 63 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6278 #>  #> $pROC_highpart$`6.69` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 62 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6218 #>  #> $pROC_highpart$`6.925` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 61 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6156 #>  #> $pROC_highpart$`7.24` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 60 controls (part_df[[\"true\"]] FALSE) < 37 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6092 #>  #> $pROC_highpart$`7.525` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 60 controls (part_df[[\"true\"]] FALSE) < 36 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6262 #>  #> $pROC_highpart$`7.645` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 59 controls (part_df[[\"true\"]] FALSE) < 36 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6198 #>  #> $pROC_highpart$`7.705` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 58 controls (part_df[[\"true\"]] FALSE) < 36 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6133 #>  #> $pROC_highpart$`7.855` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 57 controls (part_df[[\"true\"]] FALSE) < 36 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6065 #>  #> $pROC_highpart$`7.99` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 56 controls (part_df[[\"true\"]] FALSE) < 36 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5995 #>  #> $pROC_highpart$`8.055` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 55 controls (part_df[[\"true\"]] FALSE) < 36 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5922 #>  #> $pROC_highpart$`8.16` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 54 controls (part_df[[\"true\"]] FALSE) < 36 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5846 #>  #> $pROC_highpart$`8.305` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 54 controls (part_df[[\"true\"]] FALSE) < 35 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6013 #>  #> $pROC_highpart$`8.455` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 54 controls (part_df[[\"true\"]] FALSE) < 34 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.619 #>  #> $pROC_highpart$`8.535` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 53 controls (part_df[[\"true\"]] FALSE) < 34 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6118 #>  #> $pROC_highpart$`8.72` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 52 controls (part_df[[\"true\"]] FALSE) < 34 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6044 #>  #> $pROC_highpart$`8.955` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 52 controls (part_df[[\"true\"]] FALSE) < 33 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6227 #>  #> $pROC_highpart$`9.225` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 51 controls (part_df[[\"true\"]] FALSE) < 33 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6153 #>  #> $pROC_highpart$`9.455` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 49 controls (part_df[[\"true\"]] FALSE) < 33 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5996 #>  #> $pROC_highpart$`9.52` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 48 controls (part_df[[\"true\"]] FALSE) < 33 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5912 #>  #> $pROC_highpart$`9.6` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 48 controls (part_df[[\"true\"]] FALSE) < 32 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6097 #>  #> $pROC_highpart$`9.665` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 47 controls (part_df[[\"true\"]] FALSE) < 31 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6211 #>  #> $pROC_highpart$`9.75` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 46 controls (part_df[[\"true\"]] FALSE) < 31 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6129 #>  #> $pROC_highpart$`9.805` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 45 controls (part_df[[\"true\"]] FALSE) < 31 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6043 #>  #> $pROC_highpart$`9.82` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 44 controls (part_df[[\"true\"]] FALSE) < 31 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5953 #>  #> $pROC_highpart$`9.84` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 43 controls (part_df[[\"true\"]] FALSE) < 31 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5859 #>  #> $pROC_highpart$`9.9` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 43 controls (part_df[[\"true\"]] FALSE) < 30 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6054 #>  #> $pROC_highpart$`10.14` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 42 controls (part_df[[\"true\"]] FALSE) < 30 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.596 #>  #> $pROC_highpart$`10.365` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 41 controls (part_df[[\"true\"]] FALSE) < 30 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5862 #>  #> $pROC_highpart$`10.41` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 41 controls (part_df[[\"true\"]] FALSE) < 29 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6064 #>  #> $pROC_highpart$`10.465` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 40 controls (part_df[[\"true\"]] FALSE) < 29 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5966 #>  #> $pROC_highpart$`10.53` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 39 controls (part_df[[\"true\"]] FALSE) < 29 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5862 #>  #> $pROC_highpart$`10.575` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 38 controls (part_df[[\"true\"]] FALSE) < 29 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5753 #>  #> $pROC_highpart$`10.715` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 37 controls (part_df[[\"true\"]] FALSE) < 29 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5638 #>  #> $pROC_highpart$`10.95` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 36 controls (part_df[[\"true\"]] FALSE) < 29 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5517 #>  #> $pROC_highpart$`11.08` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 35 controls (part_df[[\"true\"]] FALSE) < 29 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5389 #>  #> $pROC_highpart$`11.345` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 35 controls (part_df[[\"true\"]] FALSE) < 28 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5582 #>  #> $pROC_highpart$`11.635` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 35 controls (part_df[[\"true\"]] FALSE) < 27 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5788 #>  #> $pROC_highpart$`11.675` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 35 controls (part_df[[\"true\"]] FALSE) < 26 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6011 #>  #> $pROC_highpart$`11.7` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 34 controls (part_df[[\"true\"]] FALSE) < 26 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5894 #>  #> $pROC_highpart$`11.725` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 34 controls (part_df[[\"true\"]] FALSE) < 25 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6129 #>  #> $pROC_highpart$`11.85` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 33 controls (part_df[[\"true\"]] FALSE) < 25 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6012 #>  #> $pROC_highpart$`12.095` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 32 controls (part_df[[\"true\"]] FALSE) < 25 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5888 #>  #> $pROC_highpart$`12.375` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 32 controls (part_df[[\"true\"]] FALSE) < 24 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6133 #>  #> $pROC_highpart$`12.55` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 31 controls (part_df[[\"true\"]] FALSE) < 24 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6008 #>  #> $pROC_highpart$`12.58` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 30 controls (part_df[[\"true\"]] FALSE) < 24 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5875 #>  #> $pROC_highpart$`12.63` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 29 controls (part_df[[\"true\"]] FALSE) < 24 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5733 #>  #> $pROC_highpart$`12.69` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 28 controls (part_df[[\"true\"]] FALSE) < 24 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.558 #>  #> $pROC_highpart$`12.73` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 27 controls (part_df[[\"true\"]] FALSE) < 24 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5417 #>  #> $pROC_highpart$`12.775` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 27 controls (part_df[[\"true\"]] FALSE) < 23 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5652 #>  #> $pROC_highpart$`12.85` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 26 controls (part_df[[\"true\"]] FALSE) < 23 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5485 #>  #> $pROC_highpart$`12.94` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 25 controls (part_df[[\"true\"]] FALSE) < 22 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5555 #>  #> $pROC_highpart$`13.05` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 24 controls (part_df[[\"true\"]] FALSE) < 22 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5369 #>  #> $pROC_highpart$`13.16` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 23 controls (part_df[[\"true\"]] FALSE) < 22 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5168 #>  #> $pROC_highpart$`13.305` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 23 controls (part_df[[\"true\"]] FALSE) < 21 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5414 #>  #> $pROC_highpart$`13.43` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 22 controls (part_df[[\"true\"]] FALSE) < 21 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5206 #>  #> $pROC_highpart$`13.505` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 21 controls (part_df[[\"true\"]] FALSE) < 21 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4977 #>  #> $pROC_highpart$`13.615` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 21 controls (part_df[[\"true\"]] FALSE) < 20 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5226 #>  #> $pROC_highpart$`13.77` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 21 controls (part_df[[\"true\"]] FALSE) < 19 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5501 #>  #> $pROC_highpart$`13.955` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 20 controls (part_df[[\"true\"]] FALSE) < 19 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5276 #>  #> $pROC_highpart$`14.15` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 20 controls (part_df[[\"true\"]] FALSE) < 18 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5569 #>  #> $pROC_highpart$`14.3` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 20 controls (part_df[[\"true\"]] FALSE) < 17 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5897 #>  #> $pROC_highpart$`14.455` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 19 controls (part_df[[\"true\"]] FALSE) < 17 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5681 #>  #> $pROC_highpart$`15.055` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 18 controls (part_df[[\"true\"]] FALSE) < 17 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5441 #>  #> $pROC_highpart$`15.715` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 17 controls (part_df[[\"true\"]] FALSE) < 16 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5515 #>  #> $pROC_highpart$`15.925` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 17 controls (part_df[[\"true\"]] FALSE) < 15 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5882 #>  #> $pROC_highpart$`16.035` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 17 controls (part_df[[\"true\"]] FALSE) < 14 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6303 #>  #> $pROC_highpart$`16.66` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 16 controls (part_df[[\"true\"]] FALSE) < 14 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6071 #>  #> $pROC_highpart$`17.255` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 15 controls (part_df[[\"true\"]] FALSE) < 14 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.581 #>  #> $pROC_highpart$`17.35` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 14 controls (part_df[[\"true\"]] FALSE) < 14 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.551 #>  #> $pROC_highpart$`17.63` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 14 controls (part_df[[\"true\"]] FALSE) < 13 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5934 #>  #> $pROC_highpart$`18.035` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 13 controls (part_df[[\"true\"]] FALSE) < 13 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5621 #>  #> $pROC_highpart$`18.835` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 12 controls (part_df[[\"true\"]] FALSE) < 13 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5256 #>  #> $pROC_highpart$`20.105` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 11 controls (part_df[[\"true\"]] FALSE) < 13 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4825 #>  #> $pROC_highpart$`20.985` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 10 controls (part_df[[\"true\"]] FALSE) < 13 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4308 #>  #> $pROC_highpart$`21.35` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 10 controls (part_df[[\"true\"]] FALSE) < 12 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4667 #>  #> $pROC_highpart$`21.525` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 10 controls (part_df[[\"true\"]] FALSE) < 11 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5091 #>  #> $pROC_highpart$`21.75` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 10 controls (part_df[[\"true\"]] FALSE) < 10 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.56 #>  #> $pROC_highpart$`22.1` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 10 controls (part_df[[\"true\"]] FALSE) < 9 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6222 #>  #> $pROC_highpart$`22.35` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 9 controls (part_df[[\"true\"]] FALSE) < 9 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5802 #>  #> $pROC_highpart$`22.53` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 8 controls (part_df[[\"true\"]] FALSE) < 9 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5278 #>  #> $pROC_highpart$`23.605` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 8 controls (part_df[[\"true\"]] FALSE) < 8 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5938 #>  #> $pROC_highpart$`25.885` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 7 controls (part_df[[\"true\"]] FALSE) < 8 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5357 #>  #> $pROC_highpart$`27.84` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 6 controls (part_df[[\"true\"]] FALSE) < 8 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4583 #>  #> $pROC_highpart$`30.43` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 5 controls (part_df[[\"true\"]] FALSE) < 8 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.35 #>  #> $pROC_highpart$`32.39` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 5 controls (part_df[[\"true\"]] FALSE) < 7 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4 #>  #> $pROC_highpart$`33.235` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 5 controls (part_df[[\"true\"]] FALSE) < 6 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.4667 #>  #> $pROC_highpart$`37.2` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 5 controls (part_df[[\"true\"]] FALSE) < 5 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.56 #>  #> $pROC_highpart$`40.885` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 5 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.7 #>  #> $pROC_highpart$`44.13` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 4 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.625 #>  #> $pROC_highpart$`47.22` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 3 controls (part_df[[\"true\"]] FALSE) < 4 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5 #>  #> $pROC_highpart$`48.775` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 3 controls (part_df[[\"true\"]] FALSE) < 3 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.6667 #>  #> $pROC_highpart$`52.38` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 2 controls (part_df[[\"true\"]] FALSE) < 3 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5 #>  #> $pROC_highpart$`56.825` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 2 controls (part_df[[\"true\"]] FALSE) < 2 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.75 #>  #> $pROC_highpart$`65.7` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 1 controls (part_df[[\"true\"]] FALSE) < 2 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 0.5 #>  #> $pROC_highpart$`76.435` #>  #> Call: #> roc.default(response = part_df[[\"true\"]], predictor = part_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: part_df[[\"pred\"]] in 1 controls (part_df[[\"true\"]] FALSE) < 1 cases (part_df[[\"true\"]] TRUE). #> Area under the curve: 1 #>  #> $pROC_highpart$`249.745` #> NULL #>  #> $pROC_highpart$`Inf` #> NULL #>  #>  #> $pROC_full #>  #> Call: #> roc.default(response = true_pred_df[[\"true\"]], predictor = true_pred_df[[\"pred\"]],     levels = c(FALSE, TRUE), direction = direction) #>  #> Data: true_pred_df[[\"pred\"]] in 72 controls (true_pred_df[[\"true\"]] FALSE) < 41 cases (true_pred_df[[\"true\"]] TRUE). #> Area under the curve: 0.612 #>  #> attr(,\"class\") #> [1] \"simple_rROC\" \"list\"        simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     check_positive_negative_count = TRUE ) #> Positive label not given, setting to last level of factor: Poor #> $joined_aucs #> # A tibble: 110 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.612             41             72         1            0.00322 #>  2      3.44    0.606             41             71         1.01         0.00323 #>  3      4.24    0.622             40             71         1.04         0.00329 #>  4      4.82    0.616             40             70         1.05         0.00330 #>  5      5.11    0.611             40             69         1.07         0.00332 #>  6      5.18    0.626             39             69         1.10         0.00338 #>  7      5.28    0.643             38             69         1.13         0.00343 #>  8      5.68    0.660             37             69         1.16         0.00349 #>  9      6.00    0.655             37             68         1.17         0.00351 #> 10      6.15    0.650             37             67         1.19         0.00353 #> # ℹ 100 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $positive_label #> [1] \"Poor\" #>  #> attr(,\"class\") #> [1] \"simple_rROC\" \"list\"        simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     do_parallel = TRUE ) #> Positive label not given, setting to last level of factor: Poor #> $joined_aucs #> # A tibble: 110 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.612             41             72         1            0.00322 #>  2      3.44    0.606             41             71         1.01         0.00323 #>  3      4.24    0.622             40             71         1.04         0.00329 #>  4      4.82    0.616             40             70         1.05         0.00330 #>  5      5.11    0.611             40             69         1.07         0.00332 #>  6      5.18    0.626             39             69         1.10         0.00338 #>  7      5.28    0.643             38             69         1.13         0.00343 #>  8      5.68    0.660             37             69         1.16         0.00349 #>  9      6.00    0.655             37             68         1.17         0.00351 #> 10      6.15    0.650             37             67         1.19         0.00353 #> # ℹ 100 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $positive_label #> [1] \"Poor\" #>  #> attr(,\"class\") #> [1] \"simple_rROC\" \"list\"        if (FALSE) { simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka,     get_all_aucs_fun = restrictedROC:::get_all_aucs,     do_parallel = TRUE ) }"},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC_interpret.html","id":null,"dir":"Reference","previous_headings":"","what":"restricted ROC interpretation — simple_rROC_interpret","title":"restricted ROC interpretation — simple_rROC_interpret","text":"Interpret results restriction, e.g. make nicer read process.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC_interpret.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"restricted ROC interpretation — simple_rROC_interpret","text":"","code":"simple_rROC_interpret(perf_rroc, use_abs_rzAUC = TRUE)"},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC_interpret.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"restricted ROC interpretation — simple_rROC_interpret","text":"perf_rroc Result simple_rROC use_abs_rzAUC One results restriction maximum rzAUC value. TRUE, report absolute highest, otherwise general highest including sign.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC_interpret.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"restricted ROC interpretation — simple_rROC_interpret","text":"","code":"S3-class restrictedROC of  - performances      previously reported perf_rroc result, previously seen as \"joined_aucs\"  - global      AUC, AUC variance under H0, rzAUC and asymptotic pvalue       when including all samples. This pvalue is now appropriately usable according to  - keep_highs      AUC, AUC variance under H0, rzAUC, asymptotic pvalue, threshold       Threshold is the restriction value, all other values the corresponding      performances for the highest (potentially absolute) rzAUC when keeping high      values (markerHIGH)  - keep_lows      AUC, AUC variance under H0, rzAUC, asymptotic pvalue, threshold       Threshold is the restriction value, all other values the corresponding      performances for the highest (potentially absolute) rzAUC when keeping low      values (markerLOW)  - max_total      AUC, AUC variance under H0, rzAUC, asymptotic pvalue, threshold, part       Threshold is the restriction value, all other values the corresponding      performances for the highest (potentially absolute) rzAUC overall.      This compares \"global\", \"keep_highs\" and \"keep_lows\", therefore `part`      denotes where the result was coming from.  - positive_label      What is the positive label  - pROC_full      [pROC::roc()] result of the full dataset, only if `return_pROC` was TRUE"},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC_interpret.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"restricted ROC interpretation — simple_rROC_interpret","text":"","code":"data(aSAH, package = \"pROC\") tmp <- simple_rROC(     response = aSAH$outcome,     predictor = aSAH$ndka ) #> Positive label not given, setting to last level of factor: Poor simple_rROC_interpret(tmp) #> $performances #> # A tibble: 110 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.612             41             72         1            0.00322 #>  2      3.44    0.606             41             71         1.01         0.00323 #>  3      4.24    0.622             40             71         1.04         0.00329 #>  4      4.82    0.616             40             70         1.05         0.00330 #>  5      5.11    0.611             40             69         1.07         0.00332 #>  6      5.18    0.626             39             69         1.10         0.00338 #>  7      5.28    0.643             38             69         1.13         0.00343 #>  8      5.68    0.660             37             69         1.16         0.00349 #>  9      6.00    0.655             37             68         1.17         0.00351 #> 10      6.15    0.650             37             67         1.19         0.00353 #> # ℹ 100 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>        auc auc_var_H0    rzAUC pval_asym #> 1 0.611958   0.611958 1.973565 0.0484312 #>  #> $keep_highs #>         auc  auc_var_H0    rzAUC   pval_asym threshold #> 1 0.6602037 0.003492623 2.710795 0.006712216     5.685 #>  #> $keep_lows #>        auc  auc_var_H0    rzAUC pval_asym threshold #> 1 0.611958 0.003218157 1.973565 0.0484312       Inf #>  #> $max_total #>         auc  auc_var_H0    rzAUC   pval_asym threshold part #> 1 0.6602037 0.003492623 2.710795 0.006712216     5.685 high #>  #> $positive_label #> [1] \"Poor\" #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\"          simple_rROC_interpret(tmp, use_abs_rzAUC = FALSE) #> $performances #> # A tibble: 110 × 21 #>    threshold auc_high positives_high negatives_high scaling_high auc_var_H0_high #>        <dbl>    <dbl>          <dbl>          <dbl>        <dbl>           <dbl> #>  1   -Inf       0.612             41             72         1            0.00322 #>  2      3.44    0.606             41             71         1.01         0.00323 #>  3      4.24    0.622             40             71         1.04         0.00329 #>  4      4.82    0.616             40             70         1.05         0.00330 #>  5      5.11    0.611             40             69         1.07         0.00332 #>  6      5.18    0.626             39             69         1.10         0.00338 #>  7      5.28    0.643             38             69         1.13         0.00343 #>  8      5.68    0.660             37             69         1.16         0.00349 #>  9      6.00    0.655             37             68         1.17         0.00351 #> 10      6.15    0.650             37             67         1.19         0.00353 #> # ℹ 100 more rows #> # ℹ 15 more variables: rzAUC_high <dbl>, pval_asym_onesided_high <dbl>, #> #   pval_asym_high <dbl>, auc_low <dbl>, positives_low <dbl>, #> #   negatives_low <dbl>, scaling_low <dbl>, auc_var_H0_low <dbl>, #> #   rzAUC_low <dbl>, pval_asym_onesided_low <dbl>, pval_asym_low <dbl>, #> #   tp <dbl>, fp <dbl>, tpr_global <dbl>, fpr_global <dbl> #>  #> $global #>        auc auc_var_H0    rzAUC pval_asym #> 1 0.611958   0.611958 1.973565 0.0484312 #>  #> $keep_highs #>         auc  auc_var_H0    rzAUC   pval_asym threshold #> 1 0.6602037 0.003492623 2.710795 0.006712216     5.685 #>  #> $keep_lows #>        auc  auc_var_H0    rzAUC pval_asym threshold #> 1 0.611958 0.003218157 1.973565 0.0484312       Inf #>  #> $max_total #>         auc  auc_var_H0    rzAUC   pval_asym threshold part #> 1 0.6602037 0.003492623 2.710795 0.006712216     5.685 high #>  #> $positive_label #> [1] \"Poor\" #>  #> attr(,\"class\") #> [1] \"restrictedROC\" \"list\""},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC_permutation.html","id":null,"dir":"Reference","previous_headings":"","what":"restricted ROC — simple_rROC_permutation","title":"restricted ROC — simple_rROC_permutation","text":"Calculate restricted ROC curves.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC_permutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"restricted ROC — simple_rROC_permutation","text":"","code":"simple_rROC_permutation(   response,   predictor,   positive_label = NULL,   direction = \"<\",   n_permutations = 100,   fix_seed = 0,   parallel_permutations = FALSE,   return_proc = FALSE,   verbose = FALSE )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC_permutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"restricted ROC — simple_rROC_permutation","text":"response vector containing true class labels. Care important class positive class predictions ordered according restriction predictor vector containing predictions. positive_label Label positive class. values response regarded negative cases. direction See pROC::roc(), \"<\" implemented right now. Maybe changing positive_label already solves problem. n_permutations many permutations done fix_seed boolean: FALSE, seed permutation set set.seed(fix_seed + permutation_i) parallel_permutations boolean: TRUE, permutation done via future.apply::future_lapply, otherwise base::lapply return_proc pROC::roc() returned full dataset? 2) pROC::roc() returned part datasets? works get_all_aucs_fun=get_all_aucs  get_all_aucs_norecalculation() calculate ROC curves restriction separately. verbose Print permutation ","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC_permutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"restricted ROC — simple_rROC_permutation","text":"List : - Results simple_rROC_interpret(): performances, global, keep_highs, keep_lows, max_total, positive_label \"pROC_full\": Result pROC::roc() full dataset, calculated \"permutation_pval\": Permutation p-values globally optimized (\"max\") restriction","code":"pval.twoside.max pval.twoside.global      n_permutations                         0.16                0.01              100.00     \"perm_max_bound\":         Bound table of the optimal restriction results for all permutations           # A tibble: 100 × 6          auc auc_var_H0 rzAUC pval_asym threshold part          <dbl>      <dbl> <dbl>     <dbl>     <dbl> <chr>             1 0.161     0.0134  -2.92   0.00345     17.4  high          2 0.631     0.00635  1.64   0.101       11.7  high          3 0.332     0.00826 -1.85   0.0644      13.2  high      \"perm_global_bound\":         Bound table of the global AUC (= use all samples) for all permutations           # A tibble: 100 × 4               auc auc_var_H0   rzAUC pval_asym             <dbl>      <dbl>   <dbl>     <dbl>           1 0.453      0.453 -0.827      0.408           2 0.504      0.504  0.0627     0.950"},{"path":"https://ggrlab.github.io/restrictedROC/reference/simple_rROC_permutation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"restricted ROC — simple_rROC_permutation","text":"","code":"data(aSAH, package = \"pROC\") a <- simple_rROC_permutation(     response = aSAH$outcome,     predictor = aSAH$ndka ) #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor #> Positive label not given, setting to last level of factor: Poor"},{"path":"https://ggrlab.github.io/restrictedROC/reference/summary.rROC.html","id":null,"dir":"Reference","previous_headings":"","what":"Give a summary of a rROC() result — summary.rROC","title":"Give a summary of a rROC() result — summary.rROC","text":"rROC returns nested list. looks something like: single_restriction <- reslist[[dependent_variables]][[independent_variables]] every single restriction done permutations, p-value additional info. function gives summary result.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/summary.rROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Give a summary of a rROC() result — summary.rROC","text":"","code":"# S3 method for rROC summary(   object,   relevant_cols_regex = c(\"pval.twoside.*\", \"n_permutations\", \"positive_label\",     \".*\\\\.auc$\", \"part\", \"restriction\", \"informative_range.*\"),   searchword = \"permutation_pval\",   current_level = 0,   ... )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/summary.rROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Give a summary of a rROC() result — summary.rROC","text":"object rROC result relevant_cols_regex regex filter columns single restriction. searchword searchword found names current element, current level increased function called recursively. searchword found, summary returned. current_level current level nested list. used internally. ... Additional arguments passed summary.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/summary.rROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Give a summary of a rROC() result — summary.rROC","text":"summary result:","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/train_rROC_h2o.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a predictive model using (rROC-preprocessed) data — train_rROC_h2o","title":"Train a predictive model using (rROC-preprocessed) data — train_rROC_h2o","text":"convenience function train model using data x_prepared predict outcome y. Per default, function wrapper around h2o.randomForest function.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/reference/train_rROC_h2o.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a predictive model using (rROC-preprocessed) data — train_rROC_h2o","text":"","code":"train_rROC_h2o(   x_prepared,   y,   init_h2o = TRUE,   h2o_trainfun = function(df, col_y, cols_x, ...) {          h2o::h2o.randomForest(training_frame = df, y = col_y, x = cols_x, ntrees = 1000,     max_depth = 20, min_rows = 1, nbins = 20, seed = 4242, ...)  },   ... )"},{"path":"https://ggrlab.github.io/restrictedROC/reference/train_rROC_h2o.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a predictive model using (rROC-preprocessed) data — train_rROC_h2o","text":"x_prepared data frame containing preprocessed data use model. data frame contain outcome variable. Usually result call prepare_modeldata. y outcome variable. Usually factor. init_h2o Whether initialize h2o. Defaults TRUE. h2o_trainfun function use train model. Defaults h2o.randomForest default parameters. Needs df, col_y cols_x arguments df data frame use, col_y column index outcome variable cols_x vector column indices features use predict outcome. ... Arguments passed h2o_trainfun.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/news/index.html","id":"restrictedroc-316","dir":"Changelog","previous_headings":"","what":"restrictedROC 3.1.6","title":"restrictedROC 3.1.6","text":"Added quiet=TRUE pROC::roc() within predict.restrictedROC()","code":""},{"path":"https://ggrlab.github.io/restrictedROC/news/index.html","id":"restrictedroc-300","dir":"Changelog","previous_headings":"","what":"restrictedROC 3.0.0","title":"restrictedROC 3.0.0","text":"Added code articles former gitlab repository restrictedROC-gitlab.","code":""},{"path":"https://ggrlab.github.io/restrictedROC/news/index.html","id":"restrictedroc-0009000","dir":"Changelog","previous_headings":"","what":"restrictedROC 0.0.0.9000","title":"restrictedROC 0.0.0.9000","text":"Initialization.","code":""}]
